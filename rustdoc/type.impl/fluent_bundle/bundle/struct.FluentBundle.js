(function() {var type_impls = {
"bones_framework":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FluentBundle%3CR,+IntlLangMemoizer%3E\" class=\"impl\"><a href=\"#impl-FluentBundle%3CR,+IntlLangMemoizer%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; FluentBundle&lt;R, IntlLangMemoizer&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_concurrent\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_concurrent</a>(\n    locales: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;LanguageIdentifier&gt;,\n) -&gt; FluentBundle&lt;R, IntlLangMemoizer&gt;</h4></section></summary><div class=\"docblock\"><p>A constructor analogous to [<code>FluentBundle::new</code>] but operating\non a concurrent version of [<code>IntlLangMemoizer</code>] over <a href=\"https://doc.rust-lang.org/1.81.0/std/sync/mutex/struct.Mutex.html\" title=\"struct std::sync::mutex::Mutex\"><code>Mutex</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::concurrent::FluentBundle;\n<span class=\"kw\">use </span>fluent_bundle::FluentResource;\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle: FluentBundle&lt;FluentResource&gt; =\n    FluentBundle::new_concurrent(<span class=\"macro\">vec!</span>[langid_en]);</code></pre></div>\n</div></details></div></details>",0,"bones_framework::localization::FluentBundle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FluentBundle%3CR,+M%3E\" class=\"impl\"><a href=\"#impl-FluentBundle%3CR,+M%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, M&gt; FluentBundle&lt;R, M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_resource\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_resource</a>(&amp;mut self, r: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;FluentError&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds a resource to the bundle, returning an empty <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\"><code>Result&lt;T&gt;</code></a> on success.</p>\n<p>If any entry in the resource uses the same identifier as an already\nexisting key in the bundle, the new entry will be ignored and a\n<code>FluentError::Overriding</code> will be added to the result.</p>\n<p>The method can take any type that can be borrowed to [<code>FluentResource</code>]:</p>\n<ul>\n<li><code>FluentResource</code></li>\n<li><code>&amp;FluentResource</code></li>\n<li><code>Rc&lt;FluentResource&gt;</code></li>\n<li><code>Arc&lt;FluentResource&gt;</code></li>\n</ul>\n<p>This allows the user to introduce custom resource management and share\nresources between instances of <code>FluentBundle</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"\nhello = Hi!\ngoodbye = Bye!\n\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Could not parse an FTL string.\"</span>);\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\nbundle.add_resource(resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, bundle.has_message(<span class=\"string\">\"hello\"</span>));</code></pre></div>\n<h5 id=\"whitespace\"><a class=\"doc-anchor\" href=\"#whitespace\">§</a>Whitespace</h5>\n<p>Message ids must have no leading whitespace. Message values that span\nmultiple lines must have leading whitespace on all but the first line. These\nare standard FTL syntax rules that may prove a bit troublesome in source\ncode formatting. The <a href=\"https://github.com/dtolnay/indoc\"><code>indoc!</code></a> crate can help with stripping extra indentation\nif you wish to indent your entire message.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_resource_overriding\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_resource_overriding</a>(&amp;mut self, r: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds a resource to the bundle, returning an empty <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\"><code>Result&lt;T&gt;</code></a> on success.</p>\n<p>If any entry in the resource uses the same identifier as an already\nexisting key in the bundle, the entry will override the previous one.</p>\n<p>The method can take any type that can be borrowed as [<code>FluentResource</code>]:</p>\n<ul>\n<li><code>FluentResource</code></li>\n<li><code>&amp;FluentResource</code></li>\n<li><code>Rc&lt;FluentResource&gt;</code></li>\n<li><code>Arc&lt;FluentResource&gt;</code></li>\n</ul>\n<p>This allows the user to introduce custom resource management and share\nresources between instances of <code>FluentBundle</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"\nhello = Hi!\ngoodbye = Bye!\n\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Could not parse an FTL string.\"</span>);\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"\nhello = Another Hi!\n\"</span>);\n<span class=\"kw\">let </span>resource2 = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Could not parse an FTL string.\"</span>);\n\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\nbundle.add_resource(resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n\nbundle.add_resource_overriding(resource2);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>errors = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span>msg = bundle.get_message(<span class=\"string\">\"hello\"</span>)\n    .expect(<span class=\"string\">\"Failed to retrieve the message\"</span>);\n<span class=\"kw\">let </span>value = msg.value().expect(<span class=\"string\">\"Failed to retrieve the value of the message\"</span>);\n<span class=\"macro\">assert_eq!</span>(bundle.format_pattern(value, <span class=\"prelude-val\">None</span>, <span class=\"kw-2\">&amp;mut </span>errors), <span class=\"string\">\"Another Hi!\"</span>);</code></pre></div>\n<h5 id=\"whitespace-1\"><a class=\"doc-anchor\" href=\"#whitespace-1\">§</a>Whitespace</h5>\n<p>Message ids must have no leading whitespace. Message values that span\nmultiple lines must have leading whitespace on all but the first line. These\nare standard FTL syntax rules that may prove a bit troublesome in source\ncode formatting. The <a href=\"https://github.com/dtolnay/indoc\"><code>indoc!</code></a> crate can help with stripping extra indentation\nif you wish to indent your entire message.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_use_isolating\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_use_isolating</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>When formatting patterns, <code>FluentBundle</code> inserts\nUnicode Directionality Isolation Marks to indicate\nthat the direction of a placeable may differ from\nthe surrounding message.</p>\n<p>This is important for cases such as when a\nright-to-left user name is presented in the\nleft-to-right message.</p>\n<p>In some cases, such as testing, the user may want\nto disable the isolating.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_transform\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_transform</a>(&amp;mut self, func: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.fn.html\">fn</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt;&gt;)</h4></section></summary><div class=\"docblock\"><p>This method allows to specify a function that will\nbe called on all textual fragments of the pattern\nduring formatting.</p>\n<p>This is currently primarily used for pseudolocalization,\nand <code>fluent-pseudo</code> crate provides a function\nthat can be passed here.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_formatter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_formatter</a>(\n    &amp;mut self,\n    func: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.fn.html\">fn</a>(_: &amp;FluentValue&lt;'_&gt;, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;M</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;,\n)</h4></section></summary><div class=\"docblock\"><p>This method allows to specify a function that will\nbe called before any <code>FluentValue</code> is formatted\nallowing overrides.</p>\n<p>It’s particularly useful for plugging in an external\nformatter for <code>FluentValue::Number</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_message\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">has_message</a>(&amp;self, id: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns true if this bundle contains a message with the given id.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"hello = Hi!\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Failed to parse an FTL string.\"</span>);\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\nbundle.add_resource(<span class=\"kw-2\">&amp;</span>resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"bool-val\">true</span>, bundle.has_message(<span class=\"string\">\"hello\"</span>));\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_message\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_message</a>&lt;'l&gt;(&amp;'l self, id: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FluentMessage&lt;'l&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves a <code>FluentMessage</code> from a bundle.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"hello-world = Hello World!\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Failed to parse an FTL string.\"</span>);\n\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\n\nbundle.add_resource(<span class=\"kw-2\">&amp;</span>resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n\n<span class=\"kw\">let </span>msg = bundle.get_message(<span class=\"string\">\"hello-world\"</span>);\n<span class=\"macro\">assert_eq!</span>(msg.is_some(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_pattern\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_pattern</a>&lt;'bundle, W&gt;(\n    &amp;'bundle self,\n    w: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut W</a>,\n    pattern: &amp;'bundle Pattern&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt;,\n    args: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'bundle FluentArgs&lt;'_&gt;&gt;,\n    errors: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;FluentError&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a>,\n    M: MemoizerKind,</div></h4></section></summary><div class=\"docblock\"><p>Writes a formatted pattern which comes from a <code>FluentMessage</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"hello-world = Hello World!\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Failed to parse an FTL string.\"</span>);\n\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\n\nbundle.add_resource(<span class=\"kw-2\">&amp;</span>resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n\n<span class=\"kw\">let </span>msg = bundle.get_message(<span class=\"string\">\"hello-world\"</span>)\n    .expect(<span class=\"string\">\"Failed to retrieve a FluentMessage.\"</span>);\n\n<span class=\"kw\">let </span>pattern = msg.value()\n    .expect(<span class=\"string\">\"Missing Value.\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>errors = <span class=\"macro\">vec!</span>[];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\nbundle.write_pattern(<span class=\"kw-2\">&amp;mut </span>s, <span class=\"kw-2\">&amp;</span>pattern, <span class=\"prelude-val\">None</span>, <span class=\"kw-2\">&amp;mut </span>errors)\n    .expect(<span class=\"string\">\"Failed to write.\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"Hello World!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_pattern\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">format_pattern</a>&lt;'bundle, 'args&gt;(\n    &amp;'bundle self,\n    pattern: &amp;'bundle Pattern&lt;&amp;'bundle <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt;,\n    args: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'args FluentArgs&lt;'_&gt;&gt;,\n    errors: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;FluentError&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'bundle, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;FluentResource&gt;,\n    M: MemoizerKind,</div></h4></section></summary><div class=\"docblock\"><p>Formats a pattern which comes from a <code>FluentMessage</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"hello-world = Hello World!\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Failed to parse an FTL string.\"</span>);\n\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\n\nbundle.add_resource(<span class=\"kw-2\">&amp;</span>resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n\n<span class=\"kw\">let </span>msg = bundle.get_message(<span class=\"string\">\"hello-world\"</span>)\n    .expect(<span class=\"string\">\"Failed to retrieve a FluentMessage.\"</span>);\n\n<span class=\"kw\">let </span>pattern = msg.value()\n    .expect(<span class=\"string\">\"Missing Value.\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>errors = <span class=\"macro\">vec!</span>[];\n\n<span class=\"kw\">let </span>result = bundle.format_pattern(<span class=\"kw-2\">&amp;</span>pattern, <span class=\"prelude-val\">None</span>, <span class=\"kw-2\">&amp;mut </span>errors);\n\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"string\">\"Hello World!\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_function\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_function</a>&lt;F&gt;(&amp;mut self, id: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.str.html\">str</a>, func: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, FluentError&gt;<div class=\"where\">where\n    F: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;[FluentValue&lt;'a&gt;], &amp;FluentArgs&lt;'_&gt;) -&gt; FluentValue&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Makes the provided rust function available to messages with the name <code>id</code>. See\nthe <a href=\"https://projectfluent.org/fluent/guide/functions.html\">FTL syntax guide</a> to learn how these are used in messages.</p>\n<p>FTL functions accept both positional and named args. The rust function you\nprovide therefore has two parameters: a slice of values for the positional\nargs, and a <code>FluentArgs</code> for named args.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fluent_bundle::{FluentBundle, FluentResource, FluentValue};\n<span class=\"kw\">use </span>unic_langid::langid;\n\n<span class=\"kw\">let </span>ftl_string = String::from(<span class=\"string\">\"length = { STRLEN(\\\"12345\\\") }\"</span>);\n<span class=\"kw\">let </span>resource = FluentResource::try_new(ftl_string)\n    .expect(<span class=\"string\">\"Could not parse an FTL string.\"</span>);\n<span class=\"kw\">let </span>langid_en = <span class=\"macro\">langid!</span>(<span class=\"string\">\"en-US\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bundle = FluentBundle::new(<span class=\"macro\">vec!</span>[langid_en]);\nbundle.add_resource(<span class=\"kw-2\">&amp;</span>resource)\n    .expect(<span class=\"string\">\"Failed to add FTL resources to the bundle.\"</span>);\n\n<span class=\"comment\">// Register a fn that maps from string to string length\n</span>bundle.add_function(<span class=\"string\">\"STRLEN\"</span>, |positional, _named| <span class=\"kw\">match </span>positional {\n    [FluentValue::String(str)] =&gt; str.len().into(),\n    <span class=\"kw\">_ </span>=&gt; FluentValue::Error,\n}).expect(<span class=\"string\">\"Failed to add a function to the bundle.\"</span>);\n\n<span class=\"kw\">let </span>msg = bundle.get_message(<span class=\"string\">\"length\"</span>).expect(<span class=\"string\">\"Message doesn't exist.\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>errors = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span>pattern = msg.value().expect(<span class=\"string\">\"Message has no value.\"</span>);\n<span class=\"kw\">let </span>value = bundle.format_pattern(<span class=\"kw-2\">&amp;</span>pattern, <span class=\"prelude-val\">None</span>, <span class=\"kw-2\">&amp;mut </span>errors);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>value, <span class=\"string\">\"5\"</span>);</code></pre></div>\n</div></details></div></details>",0,"bones_framework::localization::FluentBundle"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()