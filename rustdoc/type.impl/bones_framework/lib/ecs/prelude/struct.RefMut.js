(function() {var type_impls = {
"bones_framework":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;U&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<U>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;U</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CT%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Borrow%3CT%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::borrow::Borrow\">Borrow</a>&lt;T&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<T>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CT%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3CT%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<T>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Deref-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Display-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Display\">Display</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html\" title=\"trait bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/struct.Formatter.html\" title=\"struct bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/struct.Error.html\" title=\"struct bones_framework::asset::prelude::bones_utils::prelude::alloc::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Hash-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<U>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CU%3E-for-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt; for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1179\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1197\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1214\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#1232\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<U>","bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefMut%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-RefMut%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.new\" class=\"fn\">new</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut T</a>) -&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps external reference into <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a>.</p>\n<p>This function’s purpose is to satisfy type requirements\nwhere <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a> is required but reference does not live in <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::RefMut;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>r = RefMut::new(<span class=\"kw-2\">&amp;mut </span>value);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_borrow\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.with_borrow\" class=\"fn\">with_borrow</a>(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut T</a>, borrow: <a class=\"struct\" href=\"bones_framework/lib/prelude/borrow/struct.AtomicBorrowMut.html\" title=\"struct bones_framework::lib::prelude::borrow::AtomicBorrowMut\">AtomicBorrowMut</a>&lt;'a&gt;) -&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps external reference into <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a>.\nAnd associates it with provided <a href=\"bones_framework/lib/prelude/borrow/struct.AtomicBorrowMut.html\" title=\"struct bones_framework::lib::prelude::borrow::AtomicBorrowMut\"><code>AtomicBorrowMut</code></a></p>\n<p>This function is intended to be used by <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a>\nor other abstractions that use <code>AtomicBorrow</code> for locking.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::sync::atomic::AtomicIsize;\n<span class=\"kw\">use </span>atomicell::{borrow::{AtomicBorrowMut, new_lock}, RefMut};\n<span class=\"kw\">let </span>counter = new_lock();\n<span class=\"kw\">let </span>borrow = AtomicBorrowMut::try_new(<span class=\"kw-2\">&amp;</span>counter).unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>value = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>r = RefMut::with_borrow(<span class=\"kw-2\">&amp;mut </span>value, borrow);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r, <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_split\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.into_split\" class=\"fn\">into_split</a>(r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"struct\" href=\"bones_framework/lib/prelude/borrow/struct.AtomicBorrowMut.html\" title=\"struct bones_framework::lib::prelude::borrow::AtomicBorrowMut\">AtomicBorrowMut</a>&lt;'a&gt;)</h4></section></summary><div class=\"docblock\"><p>Splits wrapper into two parts. One is reference to the value and the other is\n<a href=\"bones_framework/lib/prelude/borrow/struct.AtomicBorrowMut.html\" title=\"struct bones_framework::lib::prelude::borrow::AtomicBorrowMut\"><code>AtomicBorrowMut</code></a> that guards it from being borrowed.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>User must ensure <a href=\"https://doc.rust-lang.org/1.81.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\"><code>NonNull</code></a> is not dereferenced after <a href=\"bones_framework/lib/prelude/borrow/struct.AtomicBorrowMut.html\" title=\"struct bones_framework::lib::prelude::borrow::AtomicBorrowMut\"><code>AtomicBorrowMut</code></a> is dropped.</p>\n<p>You must also treat the <a href=\"https://doc.rust-lang.org/1.81.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\"><code>NonNull</code></a> as invariant over <code>T</code>. This means that any custom\nwrapper types you make around the <a href=\"https://doc.rust-lang.org/1.81.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\"><code>NonNull&lt;T&gt;</code></a> must also be invariant over <code>T</code>. This can\nbe done by adding a <a href=\"https://doc.rust-lang.org/1.81.0/core/marker/struct.PhantomData.html\" title=\"struct core::marker::PhantomData\"><code>PhantomData&lt;*mut T&gt;</code></a> field to the struct.</p>\n<p>See the source definition of <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a> for an example.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n\n<span class=\"kw\">let </span>cell = AtomicCell::new(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>r: RefMut&lt;<span class=\"lifetime\">'_</span>, i32&gt; = cell.borrow_mut();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>(r, borrow) = RefMut::into_split(r);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r.as_ref(), <span class=\"number\">42</span>);\n\n    <span class=\"macro\">assert!</span>(cell.try_borrow().is_none(), <span class=\"string\">\"Must not be able to borrow mutably yet\"</span>);\n    <span class=\"macro\">assert!</span>(cell.try_borrow_mut().is_none(), <span class=\"string\">\"Must not be able to borrow mutably yet\"</span>);\n    drop(borrow);\n    <span class=\"macro\">assert!</span>(cell.try_borrow_mut().is_some(), <span class=\"string\">\"Must be able to borrow mutably now\"</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.map\" class=\"fn\">map</a>&lt;F, U&gt;(r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;, f: F) -&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a> for a component of the borrowed data.</p>\n<p>The <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as RefMut::map(…).\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n\n<span class=\"kw\">let </span>c = AtomicCell::new((<span class=\"number\">5</span>, <span class=\"string\">'b'</span>));\n<span class=\"kw\">let </span>b1: RefMut&lt;(u32, char)&gt; = c.borrow_mut();\n<span class=\"kw\">let </span>b2: RefMut&lt;u32&gt; = RefMut::map(b1, |t| <span class=\"kw-2\">&amp;mut </span>t.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>b2, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.filter_map\" class=\"fn\">filter_map</a>&lt;U, F&gt;(\n    r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, U&gt;, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a>&gt;,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a> for an optional component of the borrowed data.\nThe original guard is returned as an Err(..) if the closure returns None.</p>\n<p>The <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as RefMut::filter_map(…).\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n\n<span class=\"kw\">let </span>c = AtomicCell::new(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n{\n    <span class=\"kw\">let </span>b1: RefMut&lt;Vec&lt;u32&gt;&gt; = c.borrow_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b2: <span class=\"prelude-ty\">Result</span>&lt;RefMut&lt;u32&gt;, <span class=\"kw\">_</span>&gt; = RefMut::filter_map(b1, |v| v.get_mut(<span class=\"number\">1</span>));\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>b2) = b2 {\n        <span class=\"kw-2\">*</span>b2 += <span class=\"number\">2</span>;\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>c.borrow(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_split\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.map_split\" class=\"fn\">map_split</a>&lt;U, V, F&gt;(\n    r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;,\n    f: F,\n) -&gt; (<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, U&gt;, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, V&gt;)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut U</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut V</a>),\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    V: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits a <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a> into multiple <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a>s for different components of the borrowed data.</p>\n<p>The <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> is already immutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as <code>RefMut::map_split(...)</code>.\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{RefMut, AtomicCell};\n\n<span class=\"kw\">let </span>cell = AtomicCell::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>borrow = cell.borrow_mut();\n<span class=\"kw\">let </span>(begin, end) = RefMut::map_split(borrow, |slice| slice.split_at_mut(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>begin, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>end, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.leak\" class=\"fn\">leak</a>(r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Convert into a reference to the underlying data.</p>\n<p>The underlying <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> can never be mutably borrowed from again\nand will always appear already immutably borrowed.\nIt is not a good idea to leak more than a constant number of references.\nThe <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> can be immutably borrowed again if only a smaller number of leaks have occurred in total.</p>\n<p>This is an associated function that needs to be used as RefMut::leak(…).\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n<span class=\"kw\">let </span>cell = AtomicCell::new(<span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>value = RefMut::leak(cell.borrow_mut());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>value = <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert!</span>(cell.try_borrow().is_none());\n<span class=\"macro\">assert!</span>(cell.try_borrow_mut().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;U&gt;(r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;) -&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, U&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;U&gt;,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts reference and returns result wrapped in the <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a>.</p>\n<p>The <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as <code>RefMut::map_split(...)</code>.\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n\n<span class=\"kw\">let </span>c = AtomicCell::new(String::from(<span class=\"string\">\"hello\"</span>));\n<span class=\"kw\">let </span>b1: RefMut&lt;String&gt; = c.borrow_mut();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b2: RefMut&lt;str&gt; = RefMut::as_mut(b1);\nb2.make_ascii_uppercase();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>b2, <span class=\"kw-2\">*</span><span class=\"string\">\"HELLO\"</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(r: <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, T&gt;) -&gt; <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Dereferences and returns result wrapped in the <a href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\"><code>RefMut</code></a>.</p>\n<p>The <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> is already mutably borrowed, so this cannot fail.</p>\n<p>This is an associated function that needs to be used as <code>RefMut::map_split(...)</code>.\nA method would interfere with methods of the same name on the contents of a <a href=\"struct.AtomicCell.html\"><code>AtomicCell</code></a> used through <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>atomicell::{AtomicCell, RefMut};\n\n<span class=\"kw\">let </span>c = AtomicCell::new(String::from(<span class=\"string\">\"hello\"</span>));\n<span class=\"kw\">let </span>b1: RefMut&lt;String&gt; = c.borrow_mut();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b2: RefMut&lt;str&gt; = RefMut::as_deref_mut(b1);\nb2.make_ascii_uppercase();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>b2, <span class=\"kw-2\">*</span><span class=\"string\">\"HELLO\"</span>)</code></pre></div>\n</div></details></div></details>",0,"bones_framework::lib::ecs::prelude::CompMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SystemParam-for-RefMut%3C'a,+ComponentStore%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bones_ecs/system.rs.html#277\">source</a><a href=\"#impl-SystemParam-for-RefMut%3C'a,+ComponentStore%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html\" title=\"trait bones_framework::lib::ecs::prelude::SystemParam\">SystemParam</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bones_framework/asset/trait.HasSchema.html\" title=\"trait bones_framework::asset::HasSchema\">HasSchema</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.State\" class=\"associatedtype\">State</a> = <a class=\"struct\" href=\"bones_framework/asset/prelude/bones_utils/prelude/alloc/sync/struct.Arc.html\" title=\"struct bones_framework::asset::prelude::bones_utils::prelude::alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.AtomicCell.html\" title=\"struct bones_framework::lib::ecs::prelude::AtomicCell\">AtomicCell</a>&lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>The intermediate state for the parameter, that may be extracted from the world.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Param\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Param\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.Param\" class=\"associatedtype\">Param</a>&lt;'p&gt; = <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'p, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The type of the parameter, ranging over the lifetime of the intermediate state. <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.Param\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_state\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bones_ecs/system.rs.html#281\">source</a><a href=\"#method.get_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#tymethod.get_state\" class=\"fn\">get_state</a>(\n    world: &amp;<a class=\"struct\" href=\"bones_framework/lib/ecs/struct.World.html\" title=\"struct bones_framework::lib::ecs::World\">World</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html\" title=\"trait bones_framework::lib::ecs::prelude::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.State\" title=\"type bones_framework::lib::ecs::prelude::SystemParam::State\">State</a></h4></section></summary><div class='docblock'>This is called to produce the intermediate state of the system parameter. <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#tymethod.get_state\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bones_ecs/system.rs.html#285\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#tymethod.borrow\" class=\"fn\">borrow</a>&lt;'s&gt;(\n    _world: &amp;'s <a class=\"struct\" href=\"bones_framework/lib/ecs/struct.World.html\" title=\"struct bones_framework::lib::ecs::World\">World</a>,\n    state: &amp;'s mut &lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html\" title=\"trait bones_framework::lib::ecs::prelude::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.State\" title=\"type bones_framework::lib::ecs::prelude::SystemParam::State\">State</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'a, <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.ComponentStore.html\" title=\"struct bones_framework::lib::ecs::prelude::ComponentStore\">ComponentStore</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html\" title=\"trait bones_framework::lib::ecs::prelude::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bones_framework/lib/ecs/prelude/trait.SystemParam.html#associatedtype.Param\" title=\"type bones_framework::lib::ecs::prelude::SystemParam::Param\">Param</a>&lt;'s&gt;</h4></section></summary><div class='docblock'>This is used create an instance of the system parame, possibly borrowed from the\nintermediate parameter state.</div></details></div></details>","SystemParam","bones_framework::lib::ecs::prelude::CompMut"],["<section id=\"impl-Send-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Send-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: 'b + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut T</a>: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","bones_framework::lib::ecs::prelude::CompMut"],["<section id=\"impl-Sync-for-RefMut%3C'b,+T%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RefMut%3C'b,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"bones_framework/lib/ecs/prelude/struct.RefMut.html\" title=\"struct bones_framework::lib::ecs::prelude::RefMut\">RefMut</a>&lt;'b, T&gt;<div class=\"where\">where\n    T: 'b + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut T</a>: for&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","bones_framework::lib::ecs::prelude::CompMut"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()