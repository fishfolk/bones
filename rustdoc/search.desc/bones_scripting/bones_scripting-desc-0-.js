searchState.loadedDescShard("bones_scripting", 0, "Scripting plugin for the bones framework.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe prelude.\nExtension trait for the <code>Context</code> that makes it easier to …\nThe systems have been loaded.\nResource used to access the lua scripting engine.\nA lua plugin asset.\nA `SessionPlugin that will run the provided lua plugins\nThe systems that have been registered by a lua plugin.\nAn atomic cell containing the <code>LuaPluginSystemsState</code>.\nThe load state of the [`LuaPluginSystems\nResource containing the lua plugins that have been …\nA Lua script asset.\nStruct for accessing and initializing lua singletons.\nHelper trait to get a singleton fn pointer for the …\nThe systems have not been loaded yet.\nThe ID of a system stage.\nThe <code>LuaPlugin</code> has been dropped and it’s systems have …\nExtension trait on top of <code>Value</code> to add helper functions.\nA frozen reference to the ECS <code>World</code>.\nHelper to get the loaded systems.\nHelper to get the loaded systems mutably.\nConvert to a static user data type.\nSystems that run in the core stages.\nInitialize the Lua engine.\nAccess the lua engine to run code on it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not the plugin has loaded it’s systems.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>WorldRef</code> into a Lua userdata.\nLoad the lua plugin’s systems.\nInstall the lua scripting plugin.\nRun a lua script as a system on the given world.\nGet a reference to the lua singletons.\nThe lua source for the script.\nThe lua source of the script.\nStartup systems. The bool indicates whether the system has …\nThe lua closures, registered by the script, to run in …\nGenerate the environment table for executing scripts under.\nRegisters lua binding typedatas for bones_framework types.\nAn asset ref.\nA reference to an asset in an <code>EcsRef</code>\nA component ref.\nA component borrow into an <code>EcsRef</code>.\nA mutable component borrow into an <code>EcsRef</code>.\nA reference to component in an <code>EcsRef</code>.\nA reference to an ECS-compatible value.\nA borrow of an <code>EcsRef</code>.\nAn error that occurs when borrowing an <code>EcsRef</code>.\nA kind of borrow into an <code>EcsRef</code>.\nA mutable borrow of an <code>EcsRef</code>.\nA kind of mutable borrow of an <code>EcsRef</code>.\nThe kind of value reference for <code>EcsRef</code>.\nA free-standing ref, not stored in the ECS.\nA resource ref.\nA type data that can be used to specify a custom metatable …\nBorrow the value pointed to by the <code>EcsRef</code>\nImmutably borrow the data.\nMutably borrow the value pointed to by the <code>EcsRef</code>\nMutably borrow the data.\nThe kind of reference.\nThe entity to get the component data for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe kind of asset we are referencing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a lua value.\nGet the function that may be used to retrieve the …\nThe path to the desired field.\nGet the <code>SchemaRef</code>.\nGet the borrow as a <code>SchemaRef</code>.\nGet the <code>SchemaRef</code>.\nGet the borrow as a <code>SchemaRefMut</code>.\nThe asset server handle.\nThe component store.")