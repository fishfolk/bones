searchState.loadedDescShard("bones_schema", 0, "Simple reflection system based on the <code>#[repr(C)]</code> memory …\nA boolean.\nThe represents a <code>SchemaBox</code> with given type inside.\nType represents an enum, which in the C layout is called a …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\n<code>f32</code>\n<code>f64</code>\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\n<code>i128</code>\n<code>i16</code>\n<code>i32</code>\n<code>i64</code>\n<code>i8</code>\nType represents a <code>SchemaMap</code>.\nOpaque data that cannot described by a schema.\nA type of primitive.\nThe type represents a primitive value.\nA schema registered with the <code>SCHEMA_REGISTRY</code>.\nSchema information describing the memory layout of a type.\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nA Rust <code>String</code>. Must be manipulated with Rust string …\nThe type represents a struct.\nA field in a <code>StructSchemaInfo</code>.\nSchema data for a struct.\n<code>u128</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u32</code>.\n<code>u32</code>\n<code>u64</code>\nA <code>u8</code>.\n<code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAllocation and collection utilities.\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nThe prelude.\nSchema-aware smart pointers.\nTraits implementing raw function calls for cloning, …\nGlobal schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nSerde implementations for <code>Schema</code>.\nThe layout of the enum tag.\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe schema of the key type.\nThe schema of the value type.\nExtension trait for the <code>Layout</code> type that copies useful …\nA low-level memory allocation utility for creating a …\nIterator over items in a <code>ResizableAlloc</code>.\nMutable iterator over items in a <code>ResizableAlloc</code>.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nIterator over <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nUntyped schema-aware “HashMap”.\nA type-erased <code>Vec</code>-like collection that for items with the …\nIterator over <code>SchemaVec</code>.\nMutable iterator over <code>SchemaVec</code>.\nError type for <code>TypeDatas</code>\nA <code>TypeMap</code>-like structure, that does not allow removing …\nGet a raw pointer to the allocation.\nGet the capacity of the backing buffer.\nGet the capacity.\nGet the capacity of the vec.\nClears the vector, removing all values.\nClears the vector, removing all values.\nReturns true if the map contains a value for the specified …\nExtends the vector with the contents of an iterator.\nReturns a reference to the first element of the vector, or …\nReturns a mutable reference to the first element of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an item in the vec.\nGet a reference to an item in the map.\nGet an item from the vec.\nGet a value out of the map for the given key.\nBorrow data from the store, if it exists.\nGet an item in the vec.\nGet a mutable reference to an item in the map.\nGet an item from the vec.\nGet a value out of the map for the given key.\nGet the item with the given index.\nGet an untyped reference to an item in the map.\nBorrow data from the store, if it exists.\nGet an item with the given index.\nGet an untyped reference to an item in the map.\nSafety\nSafety\nGet the hash of this <code>SchemaVec</code>.\nGet the hash of the <code>SVec</code>.\nInsert an entry into the map, returning the previous …\nInsert an item into the map.\nInsert data into the store.\nInsert an untyped item into the map.\nInsert boxed data into the store.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an untyped <code>SchemaMap</code>.\nConvert to an untyped <code>SchemaVec</code>.\nConvert into a typed <code>SMap</code>.\nConvert into a typed <code>SVec</code>.\nReturns <code>true</code> if the vector has zero items in it.\nReturns true if the map contains no elements.\nReturns <code>true</code> if there are no items in the vector.\nReturns <code>true</code> if the map is empty.\nIterate over values in the vec\nIterate over entries in the map.\nIterate over the allocation.\nIterate over references to the items in the vec.\nIterate over entries in the map.\nIterate over type datas.\nIterate mutably over values in the vec\nIterate over entries in the map.\nIterate mutably over the allocation.\nIterate over mutable references to the items in the vec.\nIterate over entries in the map.\nGet the schema for the map keys.\nIterate over keys in the map.\nIterate over keys in the map.\nReturns a reference to the last element of the vector, or …\nReturns a mutable reference to the last element of the …\nGet the layout.\nGet the number of items in the vector.\nReturns the number of elements in the map.\nGet the length of the vector.\nGet the number of entries in the map.\nInitialize an empty <code>SchemaVec</code> for items with the given …\nInitialize the <code>SMap</code>.\nCreate a new <code>ResizableAlloc</code> for the given memory layout. …\nCreate a new, empty <code>SVec</code>.\nCreate a new map, with the given key and value schemas.\nto ensure that the following address will satisfy <code>align</code> …\nPop an item off the vec.\nPop an item off of the vector.\nPop the last item off of the end of the vector.\nRemoves and returns the last element of the vector if the …\nPush an item to the vec.\nPush an item onto the vector.\nPush the item into the end of the vector.\nRaw version of the <code>eq()</code> function. Not meant for normal use.\nRaw version of the <code>hash()</code> function. Not meant for normal …\nRemove and return the element at position <code>index</code> within the …\nRemove an item from the map.\nRemove and return the element at position <code>index</code> within the …\nRemove an item.\nUntypededly remove an item.\nSafety\nCreates a layout describing the record for <code>n</code> instances of …\nResize the buffer, re-allocating it’s memory.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nReverses the order of elements in the vector, in place.\nGet the schema of items in this <code>SchemaVec</code>.\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens the vector, keeping the first <code>len</code> elements and …\nGet an item in the vec.\nGet a value out of the map for the given key.\nGet an item in the vec.\nGet a value out of the map for the given key.\nGet an untyped reference to an item in the map.\nGet an untyped reference to an item in the map.\nInsert an item into the map.\nInsert an untyped item into the map.\nConvert into a typed <code>SMap</code>.\nTry to convert into a typed <code>SVec</code>.\nPop an item off the vec.\nPush an item to the vec.\nPush the item into the end of the vector.\nRemove an item.\nUntypededly remove an item.\nGet a pointer to the item with the given index without …\nGet the schema for the map values.\nIterate over values in the map.\nIterate over values in the map.\nIterate over values in the map.\nIterate over values in the map.\nCreate a new <code>ResizableAlloc</code> with the given capacity.\nA boolean.\nThe represents a <code>SchemaBox</code> with given type inside.\nType represents an enum, which in the C layout is called a …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\n<code>f32</code>\n<code>f64</code>\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\n<code>i128</code>\n<code>i16</code>\n<code>i32</code>\n<code>i64</code>\n<code>i8</code>\nType represents a <code>SchemaMap</code>.\nOpaque data that cannot described by a schema.\nA type of primitive.\nThe type represents a primitive value.\nThe number of bits in a Ulid’s random portion\nA schema registered with the <code>SCHEMA_REGISTRY</code>.\nSchema information describing the memory layout of a type.\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nA Rust <code>String</code>. Must be manipulated with Rust string …\nThe type represents a struct.\nA field in a <code>StructSchemaInfo</code>.\nSchema data for a struct.\nThe number of bits in a Ulid’s time portion\n<code>u128</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u32</code>.\n<code>u32</code>\n<code>u64</code>\nA <code>u8</code>.\n<code>u8</code>\nA Ulid is a unique 128-bit lexicographically sortable …\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nCreates a Crockford Base32 encoded string that represents …\nGet the enum, if this is a enum.\nGet the primitive, if this is a primitive.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nGet the struct, if this is a struct.\nGet the schema of the items in the vector, if this is a …\nCast a reference of this type to a reference of another …\nCast a reference of this type to a reference of another …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nCast a mutable reference of this type to a reference of …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nCalculate the layout of the type represented by the schema.\nGets the datetime of when this Ulid was created accurate …\nThe function pointer that may be used to write a default …\nThe function pointer that may be used to drop data with …\nHelper function to make sure that this schema matches …\nThe function pointer that may be used to compare two …\nIf this schema represents a struct, this returns the list …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Ulid using the provided bytes array.\nCreates a new Ulid with the given datetime\nCreates a new Ulid with the given datetime and random …\nCreate a Ulid from separated parts.\nCreates a Ulid from a Crockford Base32 encoded string\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nUnsafely get the inner value.\nRecursively checks whether or not the schema contains any …\nThe function pointer that may be used to hash the value.\nGet the registered, unique ID of the <code>Schema</code>.\nIncrement the random number, make sure that the ts millis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the Ulid is nil\nThe kind of schema.\nGet the memory layout of the enum tag.\nGet the <code>Layout</code> of the <code>Schema</code>.\nThe layout of the type.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nCreates a new Ulid with the current time (UTC)\nCreate a new <code>Unsafe</code> contianing the <code>value</code>.\nThe ‘nil Ulid’.\nGets the random section of this ulid\nRegister this schema with the global schema registry.\nRegister this schema with the global schema registry.\nRegister this schema with the global schema registry.\nReturns whether or not this schema represents the same …\nGet this type’s <code>Schema</code>.\nGet a static reference to the <code>Schema</code> that was registered.\nThe schema of this variant.\nThe schema of the field.\nThe layout of the enum tag.\nGets the timestamp section of this ulid\nReturns the bytes of the Ulid in big-endian order.\nCreates a Crockford Base32 encoded string that represents …\nCreates a Crockford Base32 encoded string that represents …\nCast a reference of this type to a reference of another …\nCast a reference of this type to a reference of another …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nCast a mutable reference of this type to a reference of …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nInfo for the enum variants.\nCreates a new Ulid using data from the given random number …\nThe alignment of the data.\nThe size of the data.\nThe schema of the key type.\nThe schema of the value type.\nA <code>bool</code>\nA <code>bool</code>\nAccess an enum.\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nAn <code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nAn <code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nThe display error message for this error type.\nAccess a map.\nAccess a map.\nThe name of a field.\nAn opaque type\nAn opaque type\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nError returned when a field is not found in a schema.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA <code>String</code>\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nA <code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>\nAccess a vec.\nAccess a vec.\nGet a helper to access the inner data.\nGet a mutable access helper to this reference.\nBorrow the schema ref as a <code>SchemaBox</code> if it is one.\nBorrow the schema ref as a <code>SchemaMap</code> if it is one.\nBorrow this box as a <code>SchemaRefMut</code>.\nConvert back to a <code>SchemaRefMut</code>\nGet the raw pointer\nGet a raw pointer to the box data.\nGet the pointer.\nBorrow this <code>SchemaRefMut</code> as a <code>SchemaRef</code>.\nBorrow this <code>SchemaRefMutAccess</code> as a <code>SchemaRefAccess</code>.\nConvert to an immutable <code>PrimitiveRef</code>.\nBorrow this box as a <code>SchemaRef</code>.\nConvert to a <code>SchemaRef</code>.\nBorrow the schema ref as a <code>SchemaVec</code> if it is one.\nCast this pointer to a reference to a type with a matching …\nCast this box to it’s inner type and return it.\nCast this pointer to a mutable reference to a type with a …\nCast this pointer to a mutable reference.\nUnsafely convert this box into an owned T.\nUnsafely cast this pointer to a specifc Rust type.\nCast this pointer to a reference to a type with a matching …\nCast this box to a mutable reference to a type with a …\nCast this pointer to a mutable reference.\nCast this box to a reference to a type with a …\nUnsafely cast this pointer to a specifc Rust type.\nClone this schema ref into a new box.\nDebug format the value stored in the schema box.\nCreate a new <code>SchemaBox</code> for a type with a <code>Schema</code> that has a …\nGet the reference to a field.\nGet field with the given index.\nGet the reference to a field.\nGet field with the given index.\nAccess a field, if it exists.\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nIterate over fields in the struct.\nInterate over the fields on the struct.\nDeallocate the memory stored in the box, but don’t run …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>SchemaRefMut</code> from a raw pointer and it’s …\nCreate a new <code>SchemaRef</code> from a raw pointer and it’s …\nCreate a new <code>SchemaBox</code> from raw parts.\nGet the hash of this schema box, if supported.\nGet the hash of this schema box.\nGet the hash of this schema box, if supported.\nGet the <code>StructSchemaInfo</code> for this struct.\nGet the enum schema info.\nGet the <code>StructSchemaInfo</code> for this struct.\nGet the enum schema info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an accessor for the inner data.\nBorrow the schema ref as a <code>SchemaBox</code> if it is one.\nGet the reference to a field.\nAccess a field, if it exists.\nGet the field pointed to by the given path.\nConsume to create an iterator over fields in the struct.\nBorrow the schema ref as a <code>SchemaMap</code> if it is one.\nConvert into an <code>SBox</code> if the schema of T matches.\nConvert into a <code>SchemaBox</code>\nBorrow this <code>SchemaRefMutAccess</code> as a <code>SchemaRefAccess</code>.\nConvert back to a <code>SchemaRefMut</code>\nConvert back to a <code>SchemaRefMut</code>\nConvert this to a <code>SchemaRefMut</code>.\nConvert back to a <code>SchemaRefMut</code>\nBorrow the schema ref as a <code>SchemaVec</code> if it is one.\nThe name of the field, if set.\nThe name of the field, if set.\nCreate a new <code>SchemaRefMut</code> from a reference to a type that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code>.\nCreate a new <code>SchemaBox</code> from an owned type.\nCreate a new <code>SBox</code>.\nCreate a new <code>SchemaRef</code> from a reference to a type that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code>.\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code> that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code> that …\nConvert a borrowed <code>SchemaRefMut</code> to an owned <code>SchemaRefMut</code> …\nGet the <code>Schema</code> for the pointer.\nGet the struct’s schema.\nGet the enum’s schema.\nGet the <code>Schema</code> for the pointer.\nGet the <code>Schema</code> for the pointer.\nGet the struct’s schema.\nGet the enum’s schema.\nCast this pointer to a reference to a type with a matching …\nCast this box to it’s inner type and return it.\nCast this pointer to a mutable reference to a type with a …\nCast this pointer to a mutable reference to a type with a …\nCast this box to a mutable reference to a type with a …\nCast this box to a reference to a type with a …\nGet the hash of this schema box, if supported.\nConvert into an <code>SBox</code> if the schema of T matches.\nAllocates a <code>SchemaBox</code> for the given <code>Schema</code>, but <strong>doesn’t </strong>…\nGet a reference to the enum’s currently selected value.\nGet a reference to the enum’s currently selected value.\nThe field’s value.\nThe field’s value.\nGet the currently-selected variant index.\nGet the currently-selected variant index.\nGet the <code>VariantInfo</code> for the current variant.\nGet the name of the currently selected variant.\nGet the name of the currently selected variant.\nGet the <code>StructSchemaInfo</code> for the current variant.\nClone <code>other</code> and write it’s data to <code>self</code>. Panics if this …\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement <code>Eq</code>…\nTrait implemented automatically for types that implement …\nWrite the default value of the type to the pointer.\nGet a callback suitable for <code>SchemaData</code>.\nWrite the default value of the type to the pointer.\nGet a callback suitable for <code>SchemaData</code>.\nWrite the default value of the type to the pointer.\nGet a callback suitable for <code>SchemaData</code>.\nGet the hash of the type.\nGet a callback suitable for <code>SchemaData</code>.\nGet the hash of the type.\nGet a callback suitable for <code>SchemaData</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nA unique identifier for a schema registered in the …\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a schema with the registry.\nThe registered schemas.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nA struct that implements <code>Serialize</code> and wraps around a …\nUse this <code>SchemaDeserialize</code> to deserialize data from the …\nThe function that may be used to deserialize the type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")