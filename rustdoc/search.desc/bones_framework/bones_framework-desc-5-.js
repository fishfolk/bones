searchState.loadedDescShard("bones_framework", 5, "Marker type which determines whether a lock guard should …\nMarker type which indicates that the Guard type for a lock …\nMarker type which indicates that the Guard type for a lock …\nInitial value for an unlocked mutex.\nInitial value.\nInitial value for an unlocked <code>RwLock</code>.\nInstant type used for <code>try_lock_until</code>.\nInstant type used for <code>try_lock_until</code>.\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nBasic operations for a mutex.\nAdditional methods for mutexes which support fair …\nAdditional methods for mutexes which support locking with …\nA raw mutex type that wraps another raw mutex to provide …\nBasic operations for a reader-writer lock.\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support fair …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support locking with …\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields an exclusive lock to a waiting thread …\nTemporarily yields a shared lock to a waiting thread if …\nTemporarily yields an upgradable lock to a waiting thread …\nAtomically downgrades an exclusive lock into a shared lock …\nDowngrades an exclusive lock to an upgradable lock.\nDowngrades an upgradable lock to a shared lock.\nChecks whether the mutex is currently locked.\nChecks if this <code>RwLock</code> is currently locked in any way.\nCheck if this <code>RwLock</code> is currently exclusively locked.\nAcquires this mutex, blocking the current thread until it …\nAcquires an exclusive lock, blocking the current thread …\nAcquires a shared lock, blocking the current thread until …\nAcquires a shared lock without deadlocking in case of a …\nAcquires an upgradable lock, blocking the current thread …\nReturns a non-zero thread ID which identifies the current …\nAttempts to acquire this mutex without blocking. Returns …\nAttempts to acquire an exclusive lock without blocking.\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire a shared lock without blocking.\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock without deadlocking in …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire an upgradable lock without blocking.\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nUnlocks this mutex.\nReleases an exclusive lock.\nReleases an exclusive lock using a fair unlock protocol.\nUnlocks this mutex using a fair unlock protocol.\nReleases a shared lock.\nReleases a shared lock using a fair unlock protocol.\nReleases an upgradable lock.\nReleases an upgradable lock using a fair unlock protocol.\nUpgrades an upgradable lock to an exclusive lock.\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nReseeds the <code>SeededCore</code> with a new seed/state.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nA <code>bool</code>\nA <code>bool</code>\nAccess an enum.\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nAn <code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nAn <code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nAccess a map.\nThe name of a field.\nAn opaque type\nAn opaque type\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nError returned when a field is not found in a schema.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA <code>String</code>\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nA <code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>\nAccess a vec.\nAccess a vec.\nThe name of the field, if set.\nThe name of the field, if set.\nThe field’s value.\nThe field’s value.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement <code>Eq</code>…\nTrait implemented automatically for types that implement …\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nA unique identifier for a schema registered in the …\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nThe registered schemas.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nA struct that implements <code>Serialize</code> and wraps around a …\nThe function that may be used to deserialize the type.\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nhas a reference to T\nhas a reference to T\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe ID is in the wrong format.\nThe type of the array’s elements.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nowns T\nowns T\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA <code>Vec</code>-like container that can store a small number of …\nA fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nReseeds the <code>SeededCore</code> with a new seed/state.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nConstruct a new <code>SmallVec</code> from a slice.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nhas a reference to T\nhas a reference to T\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe ID is in the wrong format.\nThe type of the array’s elements.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nowns T\nowns T\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA <code>Vec</code>-like container that can store a small number of …\nA fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nConvenience re-export of common traits, structs and utils.\nReseeds the <code>SeededCore</code> with a new seed/state.\nA fast but <strong>not</strong> cryptographically secure PRNG based on …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nConstruct a new <code>SmallVec</code> from a slice.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nUtilities related to FFI bindings.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nAttempts to shrink the memory block.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nA priority queue implemented with a binary heap.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA doubly-linked list with owned nodes.\nA double-ended queue (deque) implemented with a growable …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\n<code>CString</code> and its related types.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nThe <code>write</code> function takes an output stream, and an <code>Arguments</code>…\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nImplementation of <code>[T]::concat</code>\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nImplementation of <code>[T]::join</code>\nPerforms bounds-checking of a range.\nPerforms bounds-checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nConverts a boxed slice of bytes to a boxed string slice …\nCreates an <code>&amp;str</code> from a pointer and a length.\nCreates an <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nThe string Pattern API.\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nGetter for the underlying string to be searched in\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nAn analogous trait to <code>Wake</code> but used to construct a …\nThe implementation of waking a task on an executor.\nWake this task.\nWake this task.\nWake this task without consuming the waker.\nWake this task without consuming the local waker.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nThe actual reader/writer we are wrapping.\nReturns a stream over the lines of this byte stream.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>Stream</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>AsyncBufRead</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nA builder for default Fx hashers.\nA <code>HashMap</code> using a default Fx hasher.\nA <code>HashSet</code> using a default Fx hasher.\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nA convenience function for when you need a quick usize …\nA convenience function for when you need a quick 32-bit …\nA convenience function for when you need a quick 64-bit …\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nChecks if this value is equivalent to the given key.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nA Condition Variable\nA closure has completed successfully.\nA mutual exclusive primitive that is always fair, useful …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread is currently executing a closure.\nAn RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA closure has not been executed yet\nA synchronization primitive which can be used to run a …\nCurrent state of a <code>Once</code>.\nA closure was executed but panicked.\nRaw fair mutex type backed by the parking lot.\nRaw mutex type backed by the parking lot.\nRaw reader-writer lock type backed by the parking lot.\nImplementation of the <code>GetThreadId</code> trait for …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nA type indicating whether a timed wait on a condition …\nCreates a new fair mutex in an unlocked state ready for …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nDuration type used for <code>try_lock_for</code>.\nDuration type used for <code>try_lock_for</code>.\nHelper trait which returns a non-zero thread ID.\nMarker type which determines whether a lock guard should …\nMarker type which determines whether a lock guard should …\nMarker type which indicates that the Guard type for a lock …\nMarker type which indicates that the Guard type for a lock …\nInitial value for an unlocked mutex.\nInitial value.\nInitial value for an unlocked <code>RwLock</code>.\nInstant type used for <code>try_lock_until</code>.\nInstant type used for <code>try_lock_until</code>.\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nBasic operations for a mutex.\nAdditional methods for mutexes which support fair …\nAdditional methods for mutexes which support locking with …\nA raw mutex type that wraps another raw mutex to provide …\nBasic operations for a reader-writer lock.\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support fair …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support locking with …\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields an exclusive lock to a waiting thread …\nTemporarily yields a shared lock to a waiting thread if …\nTemporarily yields an upgradable lock to a waiting thread …\nAtomically downgrades an exclusive lock into a shared lock …\nDowngrades an exclusive lock to an upgradable lock.\nDowngrades an upgradable lock to a shared lock.\nChecks whether the mutex is currently locked.\nChecks if this <code>RwLock</code> is currently locked in any way.\nCheck if this <code>RwLock</code> is currently exclusively locked.\nAcquires this mutex, blocking the current thread until it …\nAcquires an exclusive lock, blocking the current thread …\nAcquires a shared lock, blocking the current thread until …\nAcquires a shared lock without deadlocking in case of a …\nAcquires an upgradable lock, blocking the current thread …\nReturns a non-zero thread ID which identifies the current …\nAttempts to acquire this mutex without blocking. Returns …\nAttempts to acquire an exclusive lock without blocking.\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire a shared lock without blocking.\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock without deadlocking in …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire an upgradable lock without blocking.\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nUnlocks this mutex.\nReleases an exclusive lock.\nReleases an exclusive lock using a fair unlock protocol.\nUnlocks this mutex using a fair unlock protocol.\nReleases a shared lock.\nReleases a shared lock using a fair unlock protocol.\nReleases an upgradable lock.\nReleases an upgradable lock using a fair unlock protocol.\nUpgrades an upgradable lock to an exclusive lock.\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nReseeds the <code>SeededCore</code> with a new seed/state.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nEncapsulates shared borrowing state.\nEncapsulates exclusive borrowing state.\nLock type used by [<code>AtomicCell</code>].\nReturns true if there are too many read refs.\nReturns true if there are too many write refs.\nClones immutable borrow of specified lock. This function …\nClones mutable borrow of specified lock. This function …\nReturns true if specified lock value is borrowed.\nReturns true if specified lock value is borrowed immutably.\nReturns true if specified lock value is borrowed mutably.\nCreate atomic borrow lock. Initially not borrowed.\nReleases immutable borrow of specified lock. This function …\nReleases mutable borrow of specified lock. This function …\nAttempts to borrow specified lock immutably.\nAttempts to borrow specified lock mutably.\nDashMap is an implementation of a concurrent associative …\nDashSet is a thin wrapper around <code>DashMap</code> using <code>()</code> as the …\nImplementation detail that is exposed due to generic …\nA read-only view into a <code>DashMap</code>. Allows to obtain raw …\nSafety\nSafety\nSafety\nSafety\nSafety\nIterator over a DashMap yielding immutable references.\nIterator over a DashMap yielding mutable references.\nIterator over a DashMap yielding key value pairs.\nThe shard wasn’t locked, and the value wasn’t present …\nThe shard was locked.\nThe value was present in the map, and the lock for the …\nRepresents the result of a non-blocking read from a DashMap…\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCall the given function with the arguments in the stack. …\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nA counter for tracking the amount of time spent in …\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nSequence pending, <code>Sequence::poll</code> will be called on the …\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nSequence finished, the values in the stack will be …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nYield the values in the stack inside a coroutine. If …\nAdd to or subtract from the current remaining fuel.\nSubtract from the current remaining fuel.\nCreate a new <code>Lua</code> instance with the core stdlib loaded.\nThe curently executing Thread.\nCreate a new <code>Lua</code> instance with no parts of the stdlib …\nEnter the garbage collection arena and perform some …\nCalled if a sub-function errors to handle the error, or if …\nRun the given executor to completion and then take return …\nThe curently running Executor.\nThis operation always returns a Number, even when called …\nCalls <code>ctx.registry().fetch(f)</code>.\n“Fetch” the real value for a handle that has been …\nRun the given executor to completion.\nThis operation always returns a Number, even when called …\nThis operation returns an Integer only if both arguments …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe fuel parameter passed to <code>Executor::step</code>.\nCreate a new <code>Lua</code> instance with all of the stdlib loaded.\nFinish the current collection cycle completely, calls …\nCalls <code>ctx.globals().get(ctx, key)</code>.\nCalls <code>ctx.interned_strings().intern(&amp;ctx, s)</code>.\nCalls <code>ctx.interned_strings().intern_static(&amp;ctx, s)</code>.\nMarks that the calling <code>Executor</code> should immediately stop …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the key-value pairs of the table.\nReturns a ‘border’ for this table.\nCompile a top-level closure from source, using the globals …\nLoad the core parts of the stdlib that do not allow …\nLoad the parts of the stdlib that allow I/O.\nCompile a top-level closure from source, using the given …\nComputes the Lua modulus (<code>%</code>) operator. This is unlike Rust…\nCreate a top-level closure, prototype must not have any …\nCreates a new <code>Executor</code> with a stopped main thread.\nReturns the next value after this key in the table order.\nCalled when a <code>Sequence</code> is first run with the stack …\nRefills fuel up to a given maximum and also clears the …\nReset this <code>Executor</code> entirely and begins running the given …\nIf this thread is in any other mode than <code>Running</code>, reset …\nReset this <code>Executor</code> entirely and begins running the given …\nIf the thread is in <code>Suspended</code> mode, resume it.\nIf the thread is in <code>Suspended</code> mode, cause an error …\nCreates a new <code>Executor</code> that begins running the given …\nCalls <code>ctx.globals().set(ctx, key, value)</code>.\nReturns true if we have positive fuel remaining <em>and</em> we …\nCalls <code>ctx.registry().singleton::&lt;S&gt;(ctx)</code>.\nCreate an instance of a type that exists at most once per …\nCreates a new <code>Executor</code> with a new <code>Thread</code> running the given …\nIf this thread is <code>Stopped</code>, start a new function with the …\nIf this thread is <code>Stopped</code>, start a new suspended function.\nCalls <code>ctx.registry().stash(ctx, s)</code>.\n“Stash” a value with a <code>&#39;gc</code> branding lifetime, creating …\nRuns the VM for a period of time controlled by the <code>fuel</code> …\nReset this <code>Executor</code> entirely, leaving it with a stopped …\nIf the thread is in the <code>Result</code> mode, take the returned (or …\nLua <code>nil</code> and <code>false</code> are false, anything else is true.\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as a Number, if …\nInterprets Numbers, Integers, and Strings as a Number, if …\nSize of all memory used by this Lua context.\nA version of <code>Lua::enter</code> that expects failure and also …\nIf the function we are returning to is Lua, returns …\nA <code>Gc</code> pointer to any type <code>T: Collect + &#39;gc</code> which allows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with the arguments in the stack. …\nSequence pending, <code>Sequence::poll</code> will be called on the …\nSequence finished, the values in the stack will be …\nYield the values in the stack inside a coroutine. If …\nCalled if a sub-function errors to handle the error, or if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalled when a <code>Sequence</code> is first run with the stack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps OpCodes to source code line numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumerals are only lexed as integers in the range […\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent line number of the source file.\nReads the next token, or None if the end of the source has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for a <code>Constant</code> that implements Hash and Eq, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA counter for tracking the amount of time spent in …\nReads a Lua script from a <code>R: Read</code> and wraps it in a …\nTakes an <code>R: BufRead</code> and:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with arguments placed after it, …\nConcatenate the given arguments into a string\nUsed to set up for a generic for loop:\nUsed to iterate a generic for loop:\nUsed for calling methods on tables: R(base + 1) = R(table) …\nUsed to iterate a numeric for loop:\nUsed to set up for a numeric for loop:\nSet elements of a table as a list.\nEffectively, call the given function with the arguments …\nTest the register as a boolean, if its boolean value …\nTest the value at the <code>value</code> register as a boolean, if its …\nPlaces the contents of the “varargs” at the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set of shared, immutable <code>String</code> values that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 16 bit index into the constant table\nAn 8 bit index into the constant table\nA one byte Option value that can either be Some(0-254) or …\nAn index into the prototype table\nAn index that points to a register in the stack relative …\nAn index into the upvalue table\nCount of arguments or return values which can either be a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCamera components.\nColor components.\nLine rendering, useful for debugging.\nModule prelude.\nBones framework rendering plugin.\nSprite rendering components.\nTile map rendering components.\nTransform component.\nUI resources &amp; components.\nMakes an entity behave like a camera.\nComponent for an entity with camera shake.\nA size setting for a camera.\nQueue that can be used to send camera trauma events.\nResource for controlling the clear color.\nThe camera will be a fixed height with a width dependent …\nThe camera will be a fixed width with a height dependent …\nResource providing a noise source for <code>CameraShake</code> entities …\nA custom viewport specification for a <code>Camera</code>.\nWhether or not the camera is enabled and rendering.\nAdds trauma to the camera, capping it at 1.0\nThe camera will always restore to this position.\nThe the length of time in seconds for the camera trauma to …\nThe maximum depth to render (on a scale from 0.0 to 1.0).\nThe minimum depth to render (on a scale from 0.0 to 1.0).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum offset angle in radians that the camera shake …\nThe maximum offset position that the camera shake can …\nCreate a new <code>CameraShake</code> component with the provided …\nInstall the camera utilities on the given <code>SystemStages</code>.\nThe physical position to render this viewport to within …\nCameras with a higher priority will be rendered on top of …\nThe event queue.\nSend a camera trauma event.\nThe height of the camera in in-game pixels.\nThe physical size of the viewport rectangle to render to …\nUtility function that spawns the camera in a default …\nThe speed that the screen is shook.\nValue from 0-1 that indicates the intensity of the shake. …\nAn optional viewport override, allowing you to specify …\nCreate a new <code>CameraShake</code> component with the provided …\nColor type.\nError for hex crate errors\nError type for hex color decoding\nError for unexpected length of hex string\nsRGBA color\nGet alpha.\nConverts a <code>Color</code> to variant <code>Color::Rgba</code>\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from sRGB colorspace\nGet blue in sRGB colorspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet green in sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet red in sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nSet alpha.\nSet blue in sRGB colorspace.\nSet green in sRGB colorspace.\nSet red in sRGB colorspace.\nAlpha channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nGreen channel. [0.0, 1.0]\nRed channel. [0.0, 1.0]\nA component for rendering a 2D line path, made up of a …\nThe color of the path.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList of indexes into the <code>points</code> vector, for which that …\nThe list of points in the path\nThe thickness of the line.\nAtlas image component.\nMetadata to define collider an atlas’s tile.\nAn animated sprite component.\nLoaded image data\nA reference to image data stored in the external bones …\nImage component.\nA 2D sprite component\nThe atlas handle.\nClamp values between range (0,0) and (1,1).\nThe sprite’s color tint\nThe sprite’s color tint\nThe number of columns in the atlas.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite vertically.\nWhether or not the flip the sprite vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if both components of max are greater than min.\nThe image for the atlas.\nThe sprite image handle.\nThis is the current index in the animation, with an <code>idx</code> of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmax point on AABB\nmin point on AABB\nCreate a new <code>AtlasSprite</code> from the given atlas handle.\nThe offset of the first tile from the top-left of the …\nThe amount of padding between tiles.\nThe number of rows in the atlas.\nGet the size in pixels of the entire atlas image.\nSprite session plugin.\nMap tile indices to extra collision metadata. This is …\nGet the position in pixels of the top-left corner of the …\nThe size of each tile in the atlas.\nA tilemap tile component.\nA tilemap layer component.\nThe texture atlas to use for the layer\nWhether or not to flip the tile horizontally.\nWhether or not to flip tile vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet’s the tile at the given position in the layer, …\nThe size of the layer in tiles.\nGet the index of the tile at the given position.\nThe tile index in the tilemap texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new tile layer\nGet the position of the tile at the given index.\nSet the tile at the given position, to a certain entity.\nThe size of each tile in the layer.\nThe vector of tile slots in this layer.\nThe main transform component.\nReturns the argument unchanged.\nCreate a transform from a rotation.\nCreate a transform from a scale.\nCreate a transform from a translation.\nCalls <code>U::from(self)</code>.\nThe rotation of the entity.\nThe scale of the entity.\nThe position of the entity in the world.\nExtension trait with helpers for the egui context\nResource containing the <code>egui::Context</code> that can be used to …\nShared resource that, if inserted, allows you to modify …\nExtension trait with helpers for egui responses\nResource for configuring egui rendering.\nResource that maps image handles to their associated egui …\nA font asset.\nThe <code>Font</code> asset loader.\nFont metadata for buttons, headings, etc, describing the …\nClear the UI focus\nThe font color.\nThe egui font data.\nThe font-family to use.\nThe name of the loaded font family.\nSet this response to focused if nothing else is focused\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>egui::TextureId</code> for the given bones <code>Handle&lt;Image&gt;</code>.\nGet a global runtime state from the EGUI context, …\nGet the Egui font ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this is a monospace font.\nCreate a new egui input hook.\nCreate an <code>egui::RichText</code> that can be passed to <code>ui.label()</code>.\nCustom scale for the UI.\nSet a global runtime state from the EGUI context.\nThe font size.\nThe Bones Framework UI plugin.\nEgui widgets.\nClone the font and set a new color.\nMetadata describing a border image.\nA button rendered with a <code>BorderImageMeta</code>\nA 9-patch style bordered frame.\nThe border images to use for a <code>ButtonThemeMeta</code> when the …\nMetadata describing a themed button.\nA margin specification.\nSet the button border image\nIf border_only is set to <code>true</code>, then the middle section of …\nSet the scale of the border image.\nThe size of the border on each side.\nThe border images to use for different button states.\nThe bottom margin.\nWhen the button is clicked on.\nThe default button state.\nSet whether or not the button focuses itself automatically …\nWhen the button is hovered for focused on.\nThe font family, size, and color to use for the button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe image for the border.\nThe size of the border image in pixels.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe left margin.\nSet the margin. This will be applied on the outside of the …\nSet the margin. This will be applied on the outside of the …\nSet the minimum size for the button\nCreate a new button\nCreate a new frame with the given <code>BorderImageMeta</code>\nSet a different border to use when the mouse is clicking …\nSet a different border to use when focusing / hovering …\nSet the padding. This will be applied on the inside of the …\nSet the padding. This will be applied on the inside of the …\nThe amount of space to pad around the internal edges of …\nPaint the frame into the given rect.\nThe right margin.\nThe scale to render the border image at.\nBy default, buttons senses clicks. Change this to a …\nRender the button\nRender the frame\nCreate a button with the given theme.\nThe top margin.\nIf <code>true</code>, the text will wrap to stay within the max width …\nNon-persistent <code>Storage</code> backend.\nPersitent storage resource.\nTrait implemented by storage backends.\nThe backend storage API.\nThe cache of objects that have been read\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet data from the storage cache.\nGet data mutably from the storage cache.\nGet data from the storage cache or insert it’s default …\nGet data mutably from the storage cache or insert it’s …\nInsert the data into storage cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the entire collection of objects from storage with …\nLoad the data from the storage backend.\nRemove data for a type from the storage.\nWrite the entire collection of objects to storage, …\nSave the data to the storage backend.\nCreate a new storage resource with the given backend …\nRun once and stop.\nReset when finished.\nA Stopwatch is a struct that track elapsed time when …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nReturns the duration of the timer.\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer. Guaranteed to be …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer as an <code>f32</code>. See also …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns <code>true</code> if the timer has reached its duration at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new timer with a given duration in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> only on the tick the timer reached its …\nReturns the mode of the timer.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nCreates a new timer with a given duration.\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nPauses the Timer. Disables the ticking of the timer.\nReturns <code>true</code> if the stopwatch is paused.\nReturns <code>true</code> if the timer is paused.\nReturns the percentage of the timer elapsed time (goes …\nReturns the percentage of the timer remaining time (goes …\nReturns the remaining time using Duration\nReturns the remaining time in seconds\nResets the stopwatch. The reset doesn’t affect the …\nResets the timer. The reset doesn’t affect the <code>paused</code> …\nSets the duration of the timer.\nSets the elapsed time of the stopwatch.\nSets the elapsed time of the timer without any other …\nSets the mode of the timer.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nAdvance the timer by <code>delta</code> seconds. Non repeating timer …\nReturns the number of times a repeating timer finished …\nUnpauses the stopwatch. Resume the effect of ticking on …\nUnpauses the Timer. Resumes the ticking of the timer.\nA <code>bi_channel</code> client.\nA <code>bi_channel</code> server.\nCreate a bi-directional channel with a given request and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")