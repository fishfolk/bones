searchState.loadedDescShard("bones_framework", 2, "The fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nThe prelude.\nSchema-aware smart pointers.\nTraits implementing raw function calls for cloning, …\nRegister this schema with the global schema registry.\nGlobal schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nSerde implementations for <code>Schema</code>.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe schema of the key type.\nThe schema of the value type.\nExtension trait for the <code>Layout</code> type that copies useful …\nA low-level memory allocation utility for creating a …\nIterator over items in a <code>ResizableAlloc</code>.\nMutable iterator over items in a <code>ResizableAlloc</code>.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nIterator over <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nUntyped schema-aware “HashMap”.\nA type-erased <code>Vec</code>-like collection that for items with the …\nIterator over <code>SchemaVec</code>.\nMutable iterator over <code>SchemaVec</code>.\nError type for <code>TypeDatas</code>\nA <code>TypeMap</code>-like structure, that does not allow removing …\nGet a raw pointer to the allocation.\nGet the capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow data from the store, if it exists.\nBorrow data from the store, if it exists.\nInsert data into the store.\nInsert boxed data into the store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nIterate over the allocation.\nIterate over type datas.\nIterate mutably over the allocation.\nGet the layout.\nCreate a new <code>ResizableAlloc</code> for the given memory layout. …\nto ensure that the following address will satisfy <code>align</code> …\nCreates a layout describing the record for <code>n</code> instances of …\nResize the buffer, re-allocating it’s memory.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nGet a pointer to the item with the given index without …\nCreate a new <code>ResizableAlloc</code> with the given capacity.\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nThe name of a field.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function that may be used to deserialize the type.\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe name of the field, if set.\nThe name of the field, if set.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nRegister this schema with the global schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nThe registered schemas.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nA <code>bool</code>\nA <code>bool</code>\nAccess an enum.\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nAn <code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nAn <code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nAccess a map.\nThe name of a field.\nAn opaque type\nAn opaque type\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nError returned when a field is not found in a schema.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA <code>String</code>\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nA <code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>\nAccess a vec.\nAccess a vec.\nThe name of the field, if set.\nThe name of the field, if set.\nThe field’s value.\nThe field’s value.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement <code>Eq</code>…\nTrait implemented automatically for types that implement …\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nA unique identifier for a schema registered in the …\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nThe registered schemas.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nA struct that implements <code>Serialize</code> and wraps around a …\nThe function that may be used to deserialize the type.\nEncapsulates shared borrowing state.\nEncapsulates exclusive borrowing state.\nLock type used by [<code>AtomicCell</code>].\nReturns true if there are too many read refs.\nReturns true if there are too many write refs.\nBorrows can be cloned.\nBorrows can be cloned.\nClones immutable borrow of specified lock. This function …\nClones mutable borrow of specified lock. This function …\nReturns dummy atomic borrow that doesn’t actually locks …\nReturns dummy atomic borrow that doesn’t actually locks …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if specified lock value is borrowed.\nReturns true if specified lock value is borrowed immutably.\nReturns true if specified lock value is borrowed mutably.\nCreate atomic borrow lock. Initially not borrowed.\nReleases immutable borrow of specified lock. This function …\nReleases mutable borrow of specified lock. This function …\nRestore previously leaked <code>AtomicBorrow</code> instance.\nRestore previously leaked <code>AtomicBorrowMut</code> instance.\nAttempts to borrow specified lock immutably.\nAttempts to borrow specified lock mutably.\nAttempts to borrow lock immutably.\nAttempts to borrow lock mutably.\nA clock that tracks how much it has advanced (and how much …\nAdvance the time exactly by the given duration.\nReturns how much time has advanced since the last <code>update</code>, …\nReturns how much time has advanced since the last <code>update</code>, …\nReturns how much time has advanced since the last <code>update</code>, …\nReturns how much time has advanced since <code>startup</code>, as …\nReturns how much time has advanced since <code>startup</code>, as <code>f32</code> …\nReturns how much time has advanced since <code>startup</code>, as <code>f64</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the clock is currently paused.\nConstructs a new <code>Time</code> instance with a specific startup …\nStops the clock, preventing it from advancing until …\nResumes the clock if paused.\nUpdates the internal time measurements.\nUpdates time with a specified <code>Instant</code>.\nSpecialization of of the fluent bundle that is used by …\nAn asset containing a <code>FluentBundle</code>.\nAn asset containing a <code>FluentResource</code>.\nBorrow the localization field from the root asset.\nAsset containing all loaded localizations, and functions …\nInternal resource used to cache the field of the root …\nThe bundles for all loaded languages.\nThe bundle selected as the current language.\nA helper macro to simplify creation of FluentArgs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a localized message.\nGet a localized message with the provided arguments.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA boxed <code>Layer</code> that can be used with <code>setup_logging</code>.\nFailed to determine a log directory.\nSettings to enable writing tracing output to files.\nError for file logging.\nGuard for file logging thread, this should be held onto …\nHow often to rotate log file.\nPath to save log files. <code>LogPath::find_app_data_dir</code> may be …\nPlugin to enable tracing. Configures global tracing …\nAttempted to setup file logging on unsupported platform.\nOptionally add an extra <code>Layer</code> to the tracing subscriber\nBeginning of log file name (e.g. “Jumpy.log”), …\nFilters logs using the <code>EnvFilter</code> format\nFind OS app data path for provided app namespace (e.g. (“…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilters out logs that are “less than” the given level. …\nThe (qualifier, organization, application) that will be …\nPath to store log files - use <code>LogPath</code>’s helper function …\nLogging macros\nIf set, will cleanup the oldest log files in directory …\nLogging prelude\nHow often to rotate log file.\nSetup the global tracing subscriber, add hook for tracing …\nHelper to call <code>setup_logging</code> conciseably with reasonable …\nPanic hook that sends panic payload to <code>tracing::error</code>, and …\n<code>setup_logs</code> is a macro for initializing logging in bones.\nBroadcast to all players.\nThe input of this player for this frame is an actual …\nThe session was disconnected.\nThe player has disconnected at or prior to this frame, so …\nResource tracking which players have been disconnected. …\nWraps <code>ggrs::Message</code> with included <code>match_id</code>, used to …\nThe <code>ggrs::Config</code> implementation used by Jumpy.\n<code>SessionRunner</code> implementation that uses <code>ggrs</code> for network …\nThe info required to create a <code>GgrsSessionRunner</code>.\nAutomatically implemented for <code>NetworkSocket</code> + …\nMuliplier for framerate that will be used when playing an …\nAmount of frames GGRS will delay local input.\nNumber of frames client may predict beyond confirmed frame …\nPossible errors returned by network loop.\nIndicates if input from networking is confirmed, …\nResource containing the <code>NetworkSocket</code> implementation while …\nTrait that must be implemented by socket connections …\nHolds data for an offline session\nHolds data for an online session\nSend to a specific player.\nA schema-compatible wrapper for ggrs <code>NetworkStats</code> struct …\nThe input of this player for this frame is predicted.\nRuntime, needed to execute network related calls.\nThe destination for a reliable network message.\nResource updated each frame exposing syncing/networking …\nThe frame time accumulator, used to produce a fixed …\nGetter for the list of active players (idx) which are …\nGetter for the list of active players (idx) which are …\nCalculates the average kilobits per second sent across all …\nCalculates the average ping across all remote players.\nClose the connection.\nGetter for the current frame (number).\nGetter for the list of players which have been …\nHandles of players that have been disconnected.\nGetter for the list of players which have been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new PlayerNetworkStats from a player index and a …\nGet the network endpoint used for all communications.\nGet a GGRS socket from this network socket.\nReturns the highest number of local frames behind across …\nReturns the highest ping across all remote players.\nReturns the highest number of remote frames behind across …\nIncrement match id so messages from previous match that …\nInput traits required by networking. These traits are …\nSession runner’s input collector.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the session is offline.\nChecks if the session is online.\nThe estimated bandwidth used between the two clients, in …\nLAN matchmaking and socket implementation.\nGetter for the last confirmed frame (number).\nThe last player input we detected.\nTimestamp of last time session was run to compute delta …\nGetter for the local frame delay.\nThe number of frames GGRS calculates that the local client …\nLocal input delay (local inputs + remote inputs will be …\nIs local input disabled? (No input will be used if set)\nGetter for the local player index, if offline defaults to …\nIndex of local player, computed from player_is_local\nGetter for the local player index, if offline defaults to …\nReturns the lowest ping across all remote players.\nSocket match id\nMax prediction window (max number of frames client may …\nWrapped message\nFPS from game adjusted with constant network factor (may …\nCreate a new sessino runner.\nSee <code>GgrsSessionRunnerInfo</code> fields for info on arguments.\nMatchmaking\nFPS from game not adjusted with network factor.\nThe roundtrip packet transmission time as calculated by …\nGet the player count for this network match.\nthe player count.\nGet the player index of the local player.\nLocal player idx.\nThe local player idx\nThe idx of the player these stats are for. Included here …\nGetter for a single player’s network stats using their …\nGetter for the number of players, if offline defaults to 0.\nGetter for the number of players, if offline defaults to …\nGetter for all players’ network stats, including local …\nModule prelude.\nSerializable data types for network messages used by the …\nReceive reliable messages from other players. The <code>usize</code> is …\nThe same as <code>local_frames_behind</code>, but calculated from the …\nGetter for remote player network stats (filtering out …\nThe length of the queue containing UDP packets which have …\nSend a reliable message to the given <code>SocketTarget</code>.\nThe GGRS peer-to-peer session.\nGetter for socket.\nThe socket that will be converted into GGRS socket …\nMutable getter for socket.\nCalculates the total kilobits per second sent across all …\nCurrent frame of simulation step\nCurrent frame of simulation step\nList of disconnected players (their idx)\nLast confirmed frame by all clients. Anything that …\nThe local input delay set for this session\nThe local player’s index\nNetworking stats for each connected player, stored at the …\nSocket\nDense input for network replication.\nExtension of <code>InputCollector</code> exposing dense control for …\nDefine input types used by game for use in networking.\nTrait allowing for creating and applying <code>DenseInput</code> from …\nRequired for use of <code>PlayerControls</code> in networking.\nGet dense control for player.\nGet dense control\nGet <code>DenseInput</code> for control.\nUpdate control of player from dense input.\nUpdate control from <code>DenseInput</code>.\nGame is starting\nJoin server\nThe type of the <code>LAN_MATCHMAKER</code> channel.\nA request that may be sent to the <code>LAN_MATCHMAKER</code>.\nA response that may come from the <code>LAN_MATCHMAKER</code>.\nServer player count\nService discover info and ping.\nServer started\nReceiver for LAN service discovery channel.\nStart matchmaker server\nStop joining match\nStop matchmaking server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin a server hosted by someone else.\nLeave a joined server.\nThe ping in milliseconds\nGet the current host info or create a new one. When there…\nUpdate server pings and turn on service discovery.\nmutli-cast dns service discover info.\nHost a server.\nStop hosting a server.\nWait for a joined game to start.\nWait for players to join a hosted server.\nNode Addr\nmatch player count\nGame player count\nLocal player index\nLan socket to game\nAn error message response\nA unique identifier for a game\nThe desired client count has been reached, and the match …\nA list of available lobbies\nConfirmation that a lobby has been created\nA unique identifier for a lobby\nInformation about a lobby\nConfirmation that a client has joined a lobby\nInformation about a lobby for the lobby list\nResponse that specifies updates about the current lobby …\nALPN used for the matchmaking protocol.\nInformation about a match that is being requested\nInternal struct used to keep track of the connection with …\nResponse that specifies updates about the current …\nOnline matchmaker channel\nStruct that holds a channel which exchange messages with …\nOnline matchmaker request\nOnline matchmaker response\nThe players will be assigned an idx based on the order …\nChoose how player_idx should be assigned to each player …\nThe number of bytes to use for read_to_end()\nThe players will randomly be assigned an idx\nSearching for matchmaking in progress\nThe order specified in the Vec will be assigned to the …\nAcquires the matchmaker connection, either establishing …\nCloses the connection with the matchmaker, and removes the …\nSends a request to the matchmaking server to create a new …\nThe current number of players in the lobby\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier for the game\nThe unique identifier for the game\nThe unique identifier for the game this lobby belongs to\nWhether the lobby is password protected\nThe unique identifier of the lobby\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a connection with the matchmaker currently …\nSends a request to the matchmaking server to join a lobby …\nSends a request to the matchmaking server to provide a …\nThis is an arbitrary set of bytes that must match exactly …\nThis is an arbitrary set of bytes that the lobby creator …\nThe maximum number of players to have in a match.\nThe maximum number of players allowed in the lobby\nThe maximum number of players allowed in the lobby\nThe name of the lobby\nThe name of the lobby\nInitialize a new MatchmakerConnectionState\nReturns the NodeId associated with the request.\nThe hashed password for the lobby, if any\nEnables choosing how player_idx should be assigned to each …\nEnables choosing how player_idx should be assigned to each …\nRead and return the latest matchmaker response, if one …\nSets the iroh NodeId that will be used to establish …\nSends a request to the matchmaking server to start …\nStops searching for a match.\nA newtype around <code>Vec2</code> that implements <code>From&lt;u16&gt;</code> and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>NetworkSocket</code> implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID for current match, messages received that do not match …\nGet the root asset of the core asset pack and cast it to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLet <code>Path</code> and <code>PathBuf</code> have <code>absolutize</code> and …\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nHelper type for storing asset extensions.\nAn identifier for an asset.\n<code>AssetIo</code> is a trait that is implemented for backends …\nA type data that indicates how to load a type as an asset.\nContext provided to custom asset loaders in the …\nThe progress that has been made loading the game assets.\nA custom assset loader.\nContains that path to an asset, and the pack_dir that it …\nA borrowed version of <code>AssetLoc</code>.\nAn asset pack contains assets that are loaded by the game.\nThe unique ID for an asset pack.\nA requirement specifier for an asset pack, made up of the …\nSpecifies an asset pack, and it’s exact version.\nStruct responsible for loading assets into it’s …\nThe inner state of the asset server.\nStores assets for later retrieval.\nA mutable memory location with dynamically checked borrow …\nAn atomic component store.\nA handle to a resource from a <code>Resources</code> collection.\nAn untyped, atomic resource cell.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nBitSet formatter.\nThe BitSet API.\nThe type of bitsets used to track entities in component …\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nType alias for …\nType alias for …\nThe <code>AssetPackId</code> of the core pack.\nError thrown when a resource cell cannot be inserted …\nAn ID for an asset that has changed.\nA unique content ID.\nA resource containing the <code>Commands</code> command queue.\nA <code>SystemParam</code> that can be used to schedule systems that …\n<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.\n<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.\nRead-only iterator over components matching a given bitset\nMutable iterator over components matching a given bitset\nRead-only iterator over components matching a given bitset.\nMutable iterator over components matching a given bitset. …\nThis trait factors out functions for iterating with bitset …\nA typed wrapper around <code>UntypedComponentStore</code>.\nA collection of <code>ComponentStore&lt;T&gt;</code>.\nProvides the <code>context</code> method for <code>Result</code>.\nYAML format for the core asset pack’s <code>pack.yaml</code> file.\nA <code>StageLabel</code> for the 5 core stages.\nError creating ID\nExtension trait for the <code>Context</code> that makes it easier to …\nResource that is automatically added to the world while a …\nAn asset with a custom asset loader.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nA <strong>data structure</strong> that can be deserialized from any data …\nDummy <code>AssetIo</code> implementation used for debugging or as a …\nHolds a list of alive entities.\nIterator over entities returned by <code>Entities::iter_with</code>.\nAn entity index.\nIterator over entities using the provided bitset.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nEuler rotation sequences.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\n<code>AssetIo</code> implementation that loads from the filesystem.\nThe first stage\nTrait implemented for types that can produce an instance …\nCreates an instance of the type this trait is implemented …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThe <code>Game</code> encompasses a complete bones game’s logic, …\nTrait for plugins that can be installed into a <code>Game</code>.\nThis trait provides the means to easily generate all …\nA typed handle to an asset.\nThe <code>Cid</code> of an asset that has changed.\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nThe index of a field. Works for tuple fields and named …\nThe system input parameter.\nAn error returned when an asset pack does not support the …\nConverts a function into a <code>System</code>.\nThe ID is in the wrong format.\nThe type of iterator this query item creates\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe fifth stage\nThe systems have been loaded.\nAn asset that has been loaded.\nStruct containing all the game’s loaded assets, …\nThe location of an asset that has changed.\nResource used to access the lua scripting engine.\nA lua plugin asset.\nA `SessionPlugin that will run the provided lua plugins\nThe systems that have been registered by a lua plugin.\nAn atomic cell containing the <code>LuaPluginSystemsState</code>.\nThe load state of the [`LuaPluginSystems\nResource containing the lua plugins that have been …\nA Lua script asset.\nStruct for accessing and initializing lua singletons.\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nAn equivalent to <code>Option&lt;T&gt;</code> that has a stable memory layout …\nContext provided while loading a metadata asset.\nThis is a metadata asset that can be loaded from JSON or …\nHelper trait to get a singleton fn pointer for the …\nMore than one entity matches the query.\nThe name of a field.\nAsset handle that may be replicated over network and …\nNo entity matches the query.\nThe systems have not been loaded yet.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nHelper func to construct a <code>OptionalQueryItem</code> wrapping a …\nHelper func to construct a <code>OptionalQueryItemMut</code> wrapping a …\nWrapper for the <code>Comp</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nWrapper for the <code>CompMut</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nYAML format for asset packs’ <code>pack.yaml</code> file.\nThe type of the parameter, ranging over the lifetime of …\nThe fourth stage\nThe second stage\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA quaternion representing an orientation.\nA type representing a component-joining entity query.\nAn error that may occur when querying for a single entity. …\nWrapper for a borrowed <code>AtomicCell</code> that will released lock …\nWrapper for mutably borrowed <code>AtomicCell</code> that will released …\n<code>SystemParam</code> for getting read access to a resource.\n<code>SystemParam</code> for getting read access to a resource and …\n<code>SystemParam</code> for getting mutable access to a resource.\n<code>SystemParam</code> for getting mutable access to a resource and …\nA collection of resources.\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nType data for asset handles.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nA custom asset loader implementation for a metadata asset.\nError type when attempting to cast between types with …\nA schema reference, containing the ID of the pack that …\nThe load context for a <code>SchemaRefMut</code>.\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nScripting plugin for the bones framework.\nA <strong>data structure</strong> that can be serialized into any data …\nA bones game. This includes all of the game worlds, and …\nType of session command\nResource that allows you to configure the current session.\nTrait for plugins that can be installed into a <code>Session</code>.\nA session runner is in charge of advancing a <code>Session</code> …\nContainer for multiple game sessions.\nThe value is set.\nA collection of systems that will be run in order.\nTrait for things that may be used to identify a system …\nThe intermediate state for the parameter, that may be …\nStruct containing a static system.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nThe type of the system that is output\nTrait implemented by systems.\nTrait used to implement parameters for <code>System</code> functions.\nTrait for system stages. A stage is a\nThe ID of a system stage.\nAn ordered collection of <code>SystemStage</code>s.\nA fast, non-cryptographic, thread-local random number …\nA clock that tracks how much it has advanced (and how much …\nExtension trait for automatically implementing all …\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nThe <code>LuaPlugin</code> has been dropped and it’s systems have …\nA wrapper struct that marks it unsafe to both create and …\nThe value is not set.\nAn untyped atomic component store.\nIterates over components using a provided bitset. Each …\nIterates over components using a provided bitset. Each …\nIterate over component store returning …\nIterate mutably over component store returning …\nHolds components of a given type indexed by <code>Entity</code>.\nMutable iterator over pointers in an untyped component …\nMutable iterator over pointers in an untyped component …\nAn untyped handle to an asset.\nAn untyped resource that may be inserted into …\nStorage for un-typed resources.\nHelper trait for unwraping each item in an array.\nThe third stage\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nExtension trait on top of <code>Value</code> to add helper functions.\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\n<strong>SemVer version</strong> as defined by https://semver.org.\nAsset IO implementation that loads assets from a URL.\nThe <code>World</code> is simply a collection of <code>Resources</code>, and …\nA frozen reference to the ECS <code>World</code>.\nIntrinsic three-axis rotation XYZ\nIntrinsic three-axis rotation XZY\nIntrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nIntrinsic three-axis rotation ZXY\nIntrinsic three-axis rotation ZYX\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nWhether or not this session should have it’s systems run.\nWhether or not this session should be active after this …\nAdd a system to this stage.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nModify the iteration bitset\nHelper to get the loaded systems.\nHelper to get the loaded systems mutably.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nConvert to a static user data type.\nReceiver for asset changes, used to implement hot reloads.\nSender for asset changes, used by the <code>AssetIo</code> …\nContent addressed cache of raw bytes for asset data.\nMaps the handle of the asset to it’s content ID.\nHelper function to return type data for a custom asset …\nThe asset server.\nThe base URL to load assets from.\nMaps asset content IDs, to assets that have been loaded by …\nReturns if all bits are set.\nBitwise AND.\nBitwise AND after NOT of rhs.\nReturns if any bits are set.\nConditionally sets or resets the given bit.\nCounts the number of set bits.\nReturns if the two bitsets have no bits in common.\nReturns if the two bitsets are equal.\nFlips the given bit.\nFormat the bits.\nInitializes all bits.\nReturns total number of bits.\nBitwise combine with MASK.\nReturns if none of the bits are set.\nBitwise NOT.\nBitwise OR.\nResets the given bit.\nSets the given bit.\nReturns if self is a subset of rhs.\nReturns if self is a superset of rhs.\nReturns if the given bit is set.\nBitwise XOR.\nShorthand for combining bitsets with bit_or.\nGet bitset of <code>ComponentStore</code> / implementor.\nShorthand for setting bits on the bitset container.\n<code>bool</code> vector mask types.\nReturns a random boolean value.\nThis module contains types that can be used to implement …\nThis is used create an instance of the system parame, …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nThe content ID of the loaded asset.\nContent id of the asset, used to lookup asset from …\nThe function pointer that may be used to clone data with …\nGet <code>ComponentStore</code> for usage with generic types …\nStores the world components.\nThe number of components (enabled bits in the <code>inner</code> …\nThe number of components (enabled bits in the <code>inner</code> …\nCheck whether or not this component store has data for the …\nWrap the error value with additional context.\nThe directory to load the core asset pack.\nThe core asset pack, if it’s been loaded.\nSystems that run in the core stages.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nCreates a bitset big enough to contain the index of each …\nThe metadata asset load context.\nThe loaded data of the asset.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nInitialize the Lua engine.\nThe game’s default asset pack.\nThe function pointer that may be used to write a default …\nWhether or not this session should be deleted.\nThe <code>Cid</code>s of the assets this asset depends on.\nThe dependency list of this asset. This should be updated …\nThe content IDs of any assets needed by this asset as a …\nDeserialize this value from the given Serde deserializer.\nThe function that may be used to deserialize the type.\nGenerate a random digit in the given <code>radix</code>.\nDisable the capture of local input by this session.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nThe function pointer that may be used to drop data with …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nList the names of the non-core asset pack folders that are …\nThe function pointer that may be used to compare two …\nAccess the lua engine to run code on it.\n<code>f32</code> vector, quaternion and matrix types.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\n<code>f64</code> vector, quaternion and matrix types.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nThe number of enabled bits discovered in the query bitset. …\nThe number of enabled bits discovered in the query bitset. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the data for the type.\nCreates <code>Self</code> using data from the given <code>World</code>.\nThe full name of the type, including any module specifiers.\nThe version of the game. This is used to evaluate whether …\nThe game <code>VersionReq</code> this asset pack is compatible with.\nThe required game version to be compatible with this asset …\nThe version of the game that the pack is not compatible …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nGets a mutable reference to the component if there is …\nGets an immutable reference to the component if there is …\nReturn the item that matches the query within the given …\nThis is called to produce the intermediate state of the …\nWhether or not the plugin has loaded it’s systems.\nWhether or not the startup systems have been run yet.\nThe function pointer that may be used to hash the value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\n<code>i32</code> vector types.\nReturns a random <code>i32</code> value.\n<code>i64</code> vector types.\nReturns a random <code>i64</code> value.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns a random <code>i8</code> value.\nThe unique identifier for the stage.\nReturns a unique identifier for the stage.\nThe runtime ID of the asset.\nThe unique identifier for the stage.\nThe unique ID of the asset pack.\nThe ID of the asset pack.\nThe asset pack ID.\nThe unique ID of the asset pack.\nImplements the <code>BitSet</code> trait members for your type through …\nLists the packs that have not been loaded due to an …\nReturns a <code>usize</code> value for stable indexing across different …\nThe component bitset iterator.\nThe component bitset iterator.\nThe asset server inner state.\nInstall the plugin into the <code>Session</code>.\nInstall the plugin into the <code>Game</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>WorldRef</code> into a Lua userdata.\nThe <code>AssetIo</code> implementation used to load assets.\nReturns a random <code>isize</code> within a given range bound.\nIterates mutable over the components of this type where …\nIterates mutably over the components of this type where …\nIterates immutably over the components of this type where …\nReturn an iterator over the provided bitset.\nIterates immutably over the components of this type where …\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe kind of schema.\nThe layout of the type.\nHints to the compiler that the branch condition is likely …\nLoad the asset from raw bytes.\nLoad the lua plugin’s systems.\nGet the binary contents of an asset.\nThe asset load progress.\nThe location of the asset.\nThe location that the asset is being loaded from.\nThe pack and path the asset was loaded from.\nGenerates a random <code>char</code> in the range a-z.\nInstall the lua scripting plugin.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nHelper function to return type data for a metadata asset.\nThe human-readable name for the stage, used for error …\nReturns the human-readable name of the label, used in …\nGet a best-effort name for the system, used in diagnostics.\nThe human-readable name for the stage, used for error …\nA best-effort name for the system, for diagnostic purposes.\nThe display name of the asset pack.\nThe name of the schema.\nThe name of the field, if set.\nThe name of the field, if set.\nUser friendly pack name.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nThe ID of the pack, or <code>None</code> if it refers to the core pack.\nThe pack_dir of the pack that the asset is in.\nThe pack_dir of the pack that the asset is in.\nThe unique ID of the asset pack this asset is located in.\nThe directory of the pack that\nMaps the directory names of asset packs to their …\nThe metadata of the pack that could not be loaded.\nThe asset pack this was loaded from, or <code>None</code> if it is from …\nExtra asset packs. The key is the the name of the asset …\nThe asset packs that have been loaded.\nThe directory to load the asset packs from.\nPartially shuffles a slice by a given amount and returns …\nThe path to the asset in it’s pack.\nThe path to the asset in it’s pack.\nThe path to the asset, relative to the root of the asset …\nMaps the asset <code>AssetLoc</code> to it’s handle.\nThe priority of this session relative to other sessions in …\nThe pointer to load.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nThe number of enabled bits in the input bitset.\nThe number of enabled bits in the input bitset.\nThe system queue that will be run at the end of the stage\nRegister this schema with the global schema registry.\nRemove all systems from this stage.\nStores the world resources.\nRestart Session Runner. This should reset accumulated …\nList of assets that depend on the given assets.\nThe runtime ID of the handle\nThe root asset for the asset pack.\nThe path to the root asset for the pack.\nThe path to the root asset for the pack.\nExecute the systems on the given <code>world</code>.\nRun the system.\nThis is run every time the system is executed\nRun a lua script as a system on the given world.\nThe session runner to use for this session.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nGet this type’s <code>Schema</code>.\nThe schema of the asset being loaded.\nThe schema of this variant.\nThe schema of the field.\nSchemas provided in the asset pack.\nThe registered schemas.\nThe paths to schema definitions to be loaded from this …\nThe paths to schema definitions to be loaded from this …\nSerialize this value into the given Serde serializer.\nThe asset server.\nThe sessions that make up the game.\nCollection of resources that will have a shared instance …\nShuffles a slice randomly in O(n) time.\nSystems that are continously run until they succeed(return …\nGet a reference to the lua singletons.\nList of sorted session keys.\nThe lua source for the script.\nThe lua source of the script.\nThe system stages.\nThe stages in the collection, in the order that they will …\nStartup systems. The bool indicates whether the system has …\nThe systems that should run at startup.\nStep the simulation once.\nThe asset store.\nTraits adding swizzle methods to all vector types.\nConvert into a <code>System</code>.\nThe collection of systems that are associated to the game …\nThe lua closures, registered by the script, to run in …\nThe list of systems in the stage.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\n<code>u32</code> vector types.\nReturns a random <code>u32</code> value.\n<code>u64</code> vector types.\nReturns a random <code>u64</code> value.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nUnwrap all the items in an array.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nThe version number of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nWhether or not this session should be rendered.\nWhether or not this session should be visible.\nSubscribe to asset changes.\nFilesystem watcher if enabled.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nWrap the error value with additional context that is …\nThe ECS world for the core.\nThe <code>extension</code> is the portion of the extension that comes …\nThe list of file extensions to load this asset from.\nThe loader implementation for the asset.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nAn asset ref.\nA reference to an asset in an <code>EcsRef</code>\nA component ref.\nA component borrow into an <code>EcsRef</code>.\nA mutable component borrow into an <code>EcsRef</code>.\nA reference to component in an <code>EcsRef</code>.\nA reference to an ECS-compatible value.\nA borrow of an <code>EcsRef</code>.\nAn error that occurs when borrowing an <code>EcsRef</code>.\nA kind of borrow into an <code>EcsRef</code>.\nA mutable borrow of an <code>EcsRef</code>.\nA kind of mutable borrow of an <code>EcsRef</code>.\nThe kind of value reference for <code>EcsRef</code>.\nA free-standing ref, not stored in the ECS.\nA resource ref.\nA type data that can be used to specify a custom metatable …\nBorrow the value pointed to by the <code>EcsRef</code>\nImmutably borrow the data.\nMutably borrow the value pointed to by the <code>EcsRef</code>\nMutably borrow the data.\nThe kind of reference.\nThe entity to get the component data for.\nGenerate the environment table for executing scripts under.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe kind of asset we are referencing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a lua value.\nGet the function that may be used to retrieve the …\nThe path to the desired field.\nRegisters lua binding typedatas for bones_framework types.\nGet the <code>SchemaRef</code>.\nGet the borrow as a <code>SchemaRef</code>.\nGet the <code>SchemaRef</code>.\nGet the borrow as a <code>SchemaRefMut</code>.\nThe asset server handle.\nThe component store.\nAn asset ref.\nA reference to an asset in an <code>EcsRef</code>\nA component ref.\nA component borrow into an <code>EcsRef</code>.\nA mutable component borrow into an <code>EcsRef</code>.\nA reference to component in an <code>EcsRef</code>.\nA reference to an ECS-compatible value.\nA borrow of an <code>EcsRef</code>.\nAn error that occurs when borrowing an <code>EcsRef</code>.\nA kind of borrow into an <code>EcsRef</code>.\nA mutable borrow of an <code>EcsRef</code>.\nA kind of mutable borrow of an <code>EcsRef</code>.\nThe kind of value reference for <code>EcsRef</code>.\nA free-standing ref, not stored in the ECS.\nA resource ref.\nA type data that can be used to specify a custom metatable …\nThe kind of reference.\nThe entity to get the component data for.\nThe kind of asset we are referencing.\nThe path to the desired field.\nThe asset server handle.\nThe component store.\nA boolean.\nThe represents a <code>SchemaBox</code> with given type inside.\nType represents an enum, which in the C layout is called a …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\n<code>f32</code>\n<code>f64</code>\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\n<code>i128</code>\n<code>i16</code>\n<code>i32</code>\n<code>i64</code>\n<code>i8</code>\nType represents a <code>SchemaMap</code>.\nOpaque data that cannot described by a schema.\nA type of primitive.\nThe type represents a primitive value.\nSchema information describing the memory layout of a type.\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nA Rust <code>String</code>. Must be manipulated with Rust string …\nThe type represents a struct.\nA field in a <code>StructSchemaInfo</code>.\nSchema data for a struct.\n<code>u128</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u32</code>.\n<code>u32</code>\n<code>u64</code>\nA <code>u8</code>.\n<code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAllocation and collection utilities.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nThe prelude.\nSchema-aware smart pointers.\nTraits implementing raw function calls for cloning, …\nRegister this schema with the global schema registry.\nGlobal schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nSerde implementations for <code>Schema</code>.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe schema of the key type.\nThe schema of the value type.\nExtension trait for the <code>Layout</code> type that copies useful …\nA low-level memory allocation utility for creating a …\nIterator over items in a <code>ResizableAlloc</code>.\nMutable iterator over items in a <code>ResizableAlloc</code>.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nIterator over <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nUntyped schema-aware “HashMap”.\nA type-erased <code>Vec</code>-like collection that for items with the …\nIterator over <code>SchemaVec</code>.\nMutable iterator over <code>SchemaVec</code>.\nError type for <code>TypeDatas</code>\nA <code>TypeMap</code>-like structure, that does not allow removing …\nto ensure that the following address will satisfy <code>align</code> …\nCreates a layout describing the record for <code>n</code> instances of …\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nThe name of a field.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function that may be used to deserialize the type.\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe name of the field, if set.\nThe name of the field, if set.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nRegister this schema with the global schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nThe registered schemas.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nA <code>bool</code>\nA <code>bool</code>\nAccess an enum.\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nAn <code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nAn <code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nAccess a map.\nThe name of a field.\nAn opaque type\nAn opaque type\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nError returned when a field is not found in a schema.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA <code>String</code>\nAccess a struct.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nA <code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>\nAccess a vec.\nAccess a vec.\nThe name of the field, if set.\nThe name of the field, if set.\nThe field’s value.\nThe field’s value.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement …\nTrait implemented automatically for types that implement <code>Eq</code>…\nTrait implemented automatically for types that implement …\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nWrite the default value of the type to the pointer.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGet the hash of the type.\nGet a callback suitable for [<code>SchemaData</code>].\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nA unique identifier for a schema registered in the …\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nThe registered schemas.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nA struct that implements <code>Serialize</code> and wraps around a …\nThe function that may be used to deserialize the type.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nEncapsulates shared borrowing state.\nEncapsulates exclusive borrowing state.\nLock type used by [<code>AtomicCell</code>].\nReturns true if there are too many read refs.\nReturns true if there are too many write refs.\nClones immutable borrow of specified lock. This function …\nClones mutable borrow of specified lock. This function …\nReturns true if specified lock value is borrowed.\nReturns true if specified lock value is borrowed immutably.\nReturns true if specified lock value is borrowed mutably.\nCreate atomic borrow lock. Initially not borrowed.\nReleases immutable borrow of specified lock. This function …\nReleases mutable borrow of specified lock. This function …\nAttempts to borrow specified lock immutably.\nAttempts to borrow specified lock mutably.\nDashMap is an implementation of a concurrent associative …\nDashSet is a thin wrapper around <code>DashMap</code> using <code>()</code> as the …\nImplementation detail that is exposed due to generic …\nA read-only view into a <code>DashMap</code>. Allows to obtain raw …\nSafety\nSafety\nSafety\nSafety\nSafety\nIterator over a DashMap yielding immutable references.\nIterator over a DashMap yielding mutable references.\nIterator over a DashMap yielding key value pairs.\nThe shard wasn’t locked, and the value wasn’t present …\nThe shard was locked.\nThe value was present in the map, and the lock for the …\nRepresents the result of a non-blocking read from a DashMap…\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCall the given function with the arguments in the stack. …\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nA counter for tracking the amount of time spent in …\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nSequence pending, <code>Sequence::poll</code> will be called on the …\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nSequence finished, the values in the stack will be …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nYield the values in the stack inside a coroutine. If …\nAdd to or subtract from the current remaining fuel.\nSubtract from the current remaining fuel.\nCreate a new <code>Lua</code> instance with the core stdlib loaded.\nThe curently executing Thread.\nCreate a new <code>Lua</code> instance with no parts of the stdlib …\nEnter the garbage collection arena and perform some …\nCalled if a sub-function errors to handle the error, or if …\nRun the given executor to completion and then take return …\nThe curently running Executor.\nThis operation always returns a Number, even when called …\nCalls <code>ctx.registry().fetch(f)</code>.\n“Fetch” the real value for a handle that has been …\nRun the given executor to completion.\nThis operation always returns a Number, even when called …\nThis operation returns an Integer only if both arguments …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe fuel parameter passed to <code>Executor::step</code>.\nCreate a new <code>Lua</code> instance with all of the stdlib loaded.\nFinish the current collection cycle completely, calls …\nCalls <code>ctx.globals().get(ctx, key)</code>.\nCalls <code>ctx.interned_strings().intern(&amp;ctx, s)</code>.\nCalls <code>ctx.interned_strings().intern_static(&amp;ctx, s)</code>.\nMarks that the calling <code>Executor</code> should immediately stop …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the key-value pairs of the table.\nReturns a ‘border’ for this table.\nCompile a top-level closure from source, using the globals …\nLoad the core parts of the stdlib that do not allow …\nLoad the parts of the stdlib that allow I/O.\nCompile a top-level closure from source, using the given …\nComputes the Lua modulus (<code>%</code>) operator. This is unlike Rust…\nCreate a top-level closure, prototype must not have any …\nCreates a new <code>Executor</code> with a stopped main thread.\nReturns the next value after this key in the table order.\nCalled when a <code>Sequence</code> is first run with the stack …\nRefills fuel up to a given maximum and also clears the …\nReset this <code>Executor</code> entirely and begins running the given …\nIf this thread is in any other mode than <code>Running</code>, reset …\nReset this <code>Executor</code> entirely and begins running the given …\nIf the thread is in <code>Suspended</code> mode, resume it.\nIf the thread is in <code>Suspended</code> mode, cause an error …\nCreates a new <code>Executor</code> that begins running the given …\nCalls <code>ctx.globals().set(ctx, key, value)</code>.\nReturns true if we have positive fuel remaining <em>and</em> we …\nCalls <code>ctx.registry().singleton::&lt;S&gt;(ctx)</code>.\nCreate an instance of a type that exists at most once per …\nCreates a new <code>Executor</code> with a new <code>Thread</code> running the given …\nIf this thread is <code>Stopped</code>, start a new function with the …\nIf this thread is <code>Stopped</code>, start a new suspended function.\nCalls <code>ctx.registry().stash(ctx, s)</code>.\n“Stash” a value with a <code>&#39;gc</code> branding lifetime, creating …\nRuns the VM for a period of time controlled by the <code>fuel</code> …\nReset this <code>Executor</code> entirely, leaving it with a stopped …\nIf the thread is in the <code>Result</code> mode, take the returned (or …\nLua <code>nil</code> and <code>false</code> are false, anything else is true.\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as an Integer, …\nInterprets Numbers, Integers, and Strings as a Number, if …\nInterprets Numbers, Integers, and Strings as a Number, if …\nSize of all memory used by this Lua context.\nA version of <code>Lua::enter</code> that expects failure and also …\nIf the function we are returning to is Lua, returns …\nA <code>Gc</code> pointer to any type <code>T: Collect + &#39;gc</code> which allows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with the arguments in the stack. …\nSequence pending, <code>Sequence::poll</code> will be called on the …\nSequence finished, the values in the stack will be …\nYield the values in the stack inside a coroutine. If …\nCalled if a sub-function errors to handle the error, or if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalled when a <code>Sequence</code> is first run with the stack …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps OpCodes to source code line numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumerals are only lexed as integers in the range […\nA 0-indexed line number of the current source input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent line number of the source file.\nReads the next token, or None if the end of the source has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper for a <code>Constant</code> that implements Hash and Eq, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA counter for tracking the amount of time spent in …\nReads a Lua script from a <code>R: Read</code> and wraps it in a …\nTakes an <code>R: BufRead</code> and:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the given function with arguments placed after it, …\nConcatenate the given arguments into a string\nUsed to set up for a generic for loop:\nUsed to iterate a generic for loop:\nUsed for calling methods on tables: R(base + 1) = R(table) …\nUsed to iterate a numeric for loop:\nUsed to set up for a numeric for loop:\nSet elements of a table as a list.\nEffectively, call the given function with the arguments …\nTest the register as a boolean, if its boolean value …\nTest the value at the <code>value</code> register as a boolean, if its …\nPlaces the contents of the “varargs” at the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA set of shared, immutable <code>String</code> values that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecution state passed to callbacks when they are run by …\nThe entry-point for the Lua VM.\nThere is an active thread in the <code>ThreadMode::Normal</code> state …\nThread has an active Lua, Callback, or Sequence frame.\nLua has errored or returned (or yielded) values that must …\nThe thread has an error or has returned (or yielded) …\nThe <code>Executor</code> is currently inside its own <code>Executor::step</code> …\nA callback or sequence that this thread owns is currently …\nThere are no threads being run and the <code>Executor</code> must be …\nNo frames are on the thread and there are no available …\nThe main thread has yielded and is waiting on being …\nThread has yielded and is waiting on being resumed.\nThe thread is waiting on another thread to finish.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 16 bit index into the constant table\nAn 8 bit index into the constant table\nA one byte Option value that can either be Some(0-254) or …\nAn index into the prototype table\nAn index that points to a register in the stack relative …\nAn index into the upvalue table\nCount of arguments or return values which can either be a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCamera components.\nColor components.\nLine rendering, useful for debugging.\nModule prelude.\nBones framework rendering plugin.\nSprite rendering components.\nTile map rendering components.\nTransform component.\nUI resources &amp; components.\nMakes an entity behave like a camera.\nComponent for an entity with camera shake.\nA size setting for a camera.\nQueue that can be used to send camera trauma events.\nResource for controlling the clear color.\nThe camera will be a fixed height with a width dependent …\nThe camera will be a fixed width with a height dependent …\nResource providing a noise source for <code>CameraShake</code> entities …\nA custom viewport specification for a <code>Camera</code>.\nWhether or not the camera is enabled and rendering.\nAdds trauma to the camera, capping it at 1.0\nThe camera will always restore to this position.\nThe the length of time in seconds for the camera trauma to …\nThe maximum depth to render (on a scale from 0.0 to 1.0).\nThe minimum depth to render (on a scale from 0.0 to 1.0).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum offset angle in radians that the camera shake …\nThe maximum offset position that the camera shake can …\nCreate a new <code>CameraShake</code> component with the provided …\nInstall the camera utilities on the given <code>SystemStages</code>.\nThe physical position to render this viewport to within …\nCameras with a higher priority will be rendered on top of …\nThe event queue.\nSend a camera trauma event.\nThe height of the camera in in-game pixels.\nThe physical size of the viewport rectangle to render to …\nUtility function that spawns the camera in a default …\nThe speed that the screen is shook.\nValue from 0-1 that indicates the intensity of the shake. …\nAn optional viewport override, allowing you to specify …\nCreate a new <code>CameraShake</code> component with the provided …\nColor type.\nError for hex crate errors\nError type for hex color decoding\nError for unexpected length of hex string\nsRGBA color\nGet alpha.\nConverts a <code>Color</code> to variant <code>Color::Rgba</code>\nConverts a <code>Color</code> to a <code>[f32; 4]</code> from sRGB colorspace\nGet blue in sRGB colorspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet green in sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet red in sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nNew <code>Color</code> from sRGB colorspace.\nSet alpha.\nSet blue in sRGB colorspace.\nSet green in sRGB colorspace.\nSet red in sRGB colorspace.\nAlpha channel. [0.0, 1.0]\nBlue channel. [0.0, 1.0]\nGreen channel. [0.0, 1.0]\nRed channel. [0.0, 1.0]\nA component for rendering a 2D line path, made up of a …\nThe color of the path.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList of indexes into the <code>points</code> vector, for which that …\nThe list of points in the path\nThe thickness of the line.\nAtlas image component.\nMetadata to define collider an atlas’s tile.\nAn animated sprite component.\nLoaded image data\nA reference to image data stored in the external bones …\nImage component.\nA 2D sprite component\nThe atlas handle.\nClamp values between range (0,0) and (1,1).\nThe sprite’s color tint\nThe sprite’s color tint\nThe number of columns in the atlas.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite vertically.\nWhether or not the flip the sprite vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if both components of max are greater than min.\nThe image for the atlas.\nThe sprite image handle.\nThis is the current index in the animation, with an <code>idx</code> of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmax point on AABB\nmin point on AABB\nCreate a new <code>AtlasSprite</code> from the given atlas handle.\nThe offset of the first tile from the top-left of the …\nThe amount of padding between tiles.\nThe number of rows in the atlas.\nGet the size in pixels of the entire atlas image.\nSprite session plugin.\nMap tile indices to extra collision metadata. This is …\nGet the position in pixels of the top-left corner of the …\nThe size of each tile in the atlas.\nA tilemap tile component.\nA tilemap layer component.\nThe texture atlas to use for the layer\nWhether or not to flip the tile horizontally.\nWhether or not to flip tile vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet’s the tile at the given position in the layer, …\nThe size of the layer in tiles.\nGet the index of the tile at the given position.\nThe tile index in the tilemap texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new tile layer\nGet the position of the tile at the given index.\nSet the tile at the given position, to a certain entity.\nThe size of each tile in the layer.\nThe vector of tile slots in this layer.\nThe main transform component.\nReturns the argument unchanged.\nCreate a transform from a rotation.\nCreate a transform from a scale.\nCreate a transform from a translation.\nCalls <code>U::from(self)</code>.\nThe rotation of the entity.\nThe scale of the entity.\nThe position of the entity in the world.\nExtension trait with helpers for the egui context\nResource containing the <code>egui::Context</code> that can be used to …\nShared resource that, if inserted, allows you to modify …\nExtension trait with helpers for egui responses\nResource for configuring egui rendering.\nResource that maps image handles to their associated egui …\nA font asset.\nThe <code>Font</code> asset loader.\nFont metadata for buttons, headings, etc, describing the …\nClear the UI focus\nThe font color.\nThe egui font data.\nThe font-family to use.\nThe name of the loaded font family.\nSet this response to focused if nothing else is focused\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>egui::TextureId</code> for the given bones <code>Handle&lt;Image&gt;</code>.\nGet a global runtime state from the EGUI context, …\nGet the Egui font ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this is a monospace font.\nCreate a new egui input hook.\nCreate an <code>egui::RichText</code> that can be passed to <code>ui.label()</code>.\nCustom scale for the UI.\nSet a global runtime state from the EGUI context.\nThe font size.\nThe Bones Framework UI plugin.\nEgui widgets.\nClone the font and set a new color.\nMetadata describing a border image.\nA button rendered with a <code>BorderImageMeta</code>\nA 9-patch style bordered frame.\nThe border images to use for a <code>ButtonThemeMeta</code> when the …\nMetadata describing a themed button.\nA margin specification.\nSet the button border image\nIf border_only is set to <code>true</code>, then the middle section of …\nSet the scale of the border image.\nThe size of the border on each side.\nThe border images to use for different button states.\nThe bottom margin.\nWhen the button is clicked on.\nThe default button state.\nSet whether or not the button focuses itself automatically …\nWhen the button is hovered for focused on.\nThe font family, size, and color to use for the button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe image for the border.\nThe size of the border image in pixels.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe left margin.\nSet the margin. This will be applied on the outside of the …\nSet the margin. This will be applied on the outside of the …\nSet the minimum size for the button\nCreate a new button\nCreate a new frame with the given <code>BorderImageMeta</code>\nSet a different border to use when the mouse is clicking …\nSet a different border to use when focusing / hovering …\nSet the padding. This will be applied on the inside of the …\nSet the padding. This will be applied on the inside of the …\nThe amount of space to pad around the internal edges of …\nPaint the frame into the given rect.\nThe right margin.\nThe scale to render the border image at.\nBy default, buttons senses clicks. Change this to a …\nRender the button\nRender the frame\nCreate a button with the given theme.\nThe top margin.\nIf <code>true</code>, the text will wrap to stay within the max width …\nNon-persistent <code>Storage</code> backend.\nPersitent storage resource.\nTrait implemented by storage backends.\nThe backend storage API.\nThe cache of objects that have been read\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet data from the storage cache.\nGet data mutably from the storage cache.\nGet data from the storage cache or insert it’s default …\nGet data mutably from the storage cache or insert it’s …\nInsert the data into storage cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the entire collection of objects from storage with …\nLoad the data from the storage backend.\nRemove data for a type from the storage.\nWrite the entire collection of objects to storage, …\nSave the data to the storage backend.\nCreate a new storage resource with the given backend …\nRun once and stop.\nReset when finished.\nA Stopwatch is a struct that track elapsed time when …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nReturns the duration of the timer.\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer. Guaranteed to be …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer as an <code>f32</code>. See also …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns <code>true</code> if the timer has reached its duration at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new timer with a given duration in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> only on the tick the timer reached its …\nReturns the mode of the timer.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nCreates a new timer with a given duration.\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nPauses the Timer. Disables the ticking of the timer.\nReturns <code>true</code> if the stopwatch is paused.\nReturns <code>true</code> if the timer is paused.\nReturns the percentage of the timer elapsed time (goes …\nReturns the percentage of the timer remaining time (goes …\nReturns the remaining time using Duration\nReturns the remaining time in seconds\nResets the stopwatch. The reset doesn’t affect the …\nResets the timer. The reset doesn’t affect the <code>paused</code> …\nSets the duration of the timer.\nSets the elapsed time of the stopwatch.\nSets the elapsed time of the timer without any other …\nSets the mode of the timer.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nAdvance the timer by <code>delta</code> seconds. Non repeating timer …\nReturns the number of times a repeating timer finished …\nUnpauses the stopwatch. Resume the effect of ticking on …\nUnpauses the Timer. Resumes the ticking of the timer.\nA <code>bi_channel</code> client.\nA <code>bi_channel</code> server.\nCreate a bi-directional channel with a given request and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")