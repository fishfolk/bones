searchState.loadedDescShard("bones_framework", 3, "Write the entire collection of objects to storage, …\nSave the data to the storage backend.\nCreate a new storage resource with the given backend …\nRun once and stop.\nReset when finished.\nA Stopwatch is a struct that track elapsed time when …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nReturns the duration of the timer.\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer. Guaranteed to be …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer as an <code>f32</code>. See also …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns <code>true</code> if the timer has reached its duration at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new timer with a given duration in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> only on the tick the timer reached its …\nReturns the mode of the timer.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nCreates a new timer with a given duration.\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nPauses the Timer. Disables the ticking of the timer.\nReturns <code>true</code> if the stopwatch is paused.\nReturns <code>true</code> if the timer is paused.\nReturns the percentage of the timer elapsed time (goes …\nReturns the percentage of the timer remaining time (goes …\nReturns the remaining time using Duration\nReturns the remaining time in seconds\nResets the stopwatch. The reset doesn’t affect the …\nResets the timer. The reset doesn’t affect the <code>paused</code> …\nSets the duration of the timer.\nSets the elapsed time of the stopwatch.\nSets the elapsed time of the timer without any other …\nSets the mode of the timer.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nAdvance the timer by <code>delta</code> seconds. Non repeating timer …\nReturns the number of times a repeating timer finished …\nUnpauses the stopwatch. Resume the effect of ticking on …\nUnpauses the Timer. Resumes the ticking of the timer.\nA <code>bi_channel</code> client.\nA <code>bi_channel</code> server.\nCreate a bi-directional channel with a given request and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")