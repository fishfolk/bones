searchState.loadedDescShard("bones_framework", 3, "Image component.\nA 2D sprite component\nThe atlas handle.\nClamp values between range (0,0) and (1,1).\nThe sprite’s color tint\nThe sprite’s color tint\nThe number of columns in the atlas.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite horizontally.\nWhether or not the flip the sprite vertically.\nWhether or not the flip the sprite vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if both components of max are greater than min.\nThe image for the atlas.\nThe sprite image handle.\nThis is the current index in the animation, with an <code>idx</code> of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmax point on AABB\nmin point on AABB\nCreate a new <code>AtlasSprite</code> from the given atlas handle.\nThe offset of the first tile from the top-left of the …\nThe amount of padding between tiles.\nThe number of rows in the atlas.\nGet the size in pixels of the entire atlas image.\nSprite session plugin.\nMap tile indices to extra collision metadata. This is …\nGet the position in pixels of the top-left corner of the …\nThe size of each tile in the atlas.\nA tilemap tile component.\nA tilemap layer component.\nThe texture atlas to use for the layer\nWhether or not to flip the tile horizontally.\nWhether or not to flip tile vertically.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet’s the tile at the given position in the layer, …\nThe size of the layer in tiles.\nGet the index of the tile at the given position.\nThe tile index in the tilemap texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new tile layer\nGet the position of the tile at the given index.\nSet the tile at the given position, to a certain entity.\nThe size of each tile in the layer.\nThe vector of tile slots in this layer.\nThe main transform component.\nReturns the argument unchanged.\nCreate a transform from a rotation.\nCreate a transform from a scale.\nCreate a transform from a translation.\nCalls <code>U::from(self)</code>.\nThe rotation of the entity.\nThe scale of the entity.\nThe position of the entity in the world.\nExtension trait with helpers for the egui context\nResource containing the <code>egui::Context</code> that can be used to …\nShared resource that, if inserted, allows you to modify …\nExtension trait with helpers for egui responses\nResource for configuring egui rendering.\nResource that maps image handles to their associated egui …\nA font asset.\nThe <code>Font</code> asset loader.\nFont metadata for buttons, headings, etc, describing the …\nClear the UI focus\nThe font color.\nThe egui font data.\nThe font-family to use.\nThe name of the loaded font family.\nSet this response to focused if nothing else is focused\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>egui::TextureId</code> for the given bones <code>Handle&lt;Image&gt;</code>.\nGet a global runtime state from the EGUI context, …\nGet the Egui font ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this is a monospace font.\nCreate a new egui input hook.\nCreate an <code>egui::RichText</code> that can be passed to <code>ui.label()</code>.\nCustom scale for the UI.\nSet a global runtime state from the EGUI context.\nThe font size.\nThe Bones Framework UI plugin.\nEgui widgets.\nClone the font and set a new color.\nMetadata describing a border image.\nA button rendered with a <code>BorderImageMeta</code>\nA 9-patch style bordered frame.\nThe border images to use for a <code>ButtonThemeMeta</code> when the …\nMetadata describing a themed button.\nA margin specification.\nSet the button border image\nIf border_only is set to <code>true</code>, then the middle section of …\nSet the scale of the border image.\nThe size of the border on each side.\nThe border images to use for different button states.\nThe bottom margin.\nWhen the button is clicked on.\nThe default button state.\nSet whether or not the button focuses itself automatically …\nWhen the button is hovered for focused on.\nThe font family, size, and color to use for the button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe image for the border.\nThe size of the border image in pixels.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe left margin.\nSet the margin. This will be applied on the outside of the …\nSet the margin. This will be applied on the outside of the …\nSet the minimum size for the button\nCreate a new button\nCreate a new frame with the given <code>BorderImageMeta</code>\nSet a different border to use when the mouse is clicking …\nSet a different border to use when focusing / hovering …\nSet the padding. This will be applied on the inside of the …\nSet the padding. This will be applied on the inside of the …\nThe amount of space to pad around the internal edges of …\nPaint the frame into the given rect.\nThe right margin.\nThe scale to render the border image at.\nBy default, buttons senses clicks. Change this to a …\nRender the button\nRender the frame\nCreate a button with the given theme.\nThe top margin.\nIf <code>true</code>, the text will wrap to stay within the max width …\nNon-persistent <code>Storage</code> backend.\nPersitent storage resource.\nTrait implemented by storage backends.\nThe backend storage API.\nThe cache of objects that have been read\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet data from the storage cache.\nGet data mutably from the storage cache.\nGet data from the storage cache or insert it’s default …\nGet data mutably from the storage cache or insert it’s …\nInsert the data into storage cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the entire collection of objects from storage with …\nLoad the data from the storage backend.\nRemove data for a type from the storage.\nWrite the entire collection of objects to storage, …\nSave the data to the storage backend.\nCreate a new storage resource with the given backend …\nRun once and stop.\nReset when finished.\nA Stopwatch is a struct that track elapsed time when …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nReturns the duration of the timer.\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer. Guaranteed to be …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the time elapsed on the timer as an <code>f32</code>. See also …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns <code>true</code> if the timer has reached its duration at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new timer with a given duration in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> only on the tick the timer reached its …\nReturns the mode of the timer.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nCreates a new timer with a given duration.\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nPauses the Timer. Disables the ticking of the timer.\nReturns <code>true</code> if the stopwatch is paused.\nReturns <code>true</code> if the timer is paused.\nReturns the percentage of the timer elapsed time (goes …\nReturns the percentage of the timer remaining time (goes …\nReturns the remaining time using Duration\nReturns the remaining time in seconds\nResets the stopwatch. The reset doesn’t affect the …\nResets the timer. The reset doesn’t affect the <code>paused</code> …\nSets the duration of the timer.\nSets the elapsed time of the stopwatch.\nSets the elapsed time of the timer without any other …\nSets the mode of the timer.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nAdvance the timer by <code>delta</code> seconds. Non repeating timer …\nReturns the number of times a repeating timer finished …\nUnpauses the stopwatch. Resume the effect of ticking on …\nUnpauses the Timer. Resumes the ticking of the timer.\nA <code>bi_channel</code> client.\nA <code>bi_channel</code> server.\nCreate a bi-directional channel with a given request and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")