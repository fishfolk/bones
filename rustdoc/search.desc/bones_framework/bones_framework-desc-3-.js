searchState.loadedDescShard("bones_framework", 3, "A <code>SystemParam</code> that can be used to schedule systems that …\n<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.\n<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.\nRead-only iterator over components matching a given bitset\nMutable iterator over components matching a given bitset\nRead-only iterator over components matching a given bitset.\nMutable iterator over components matching a given bitset. …\nThis trait factors out functions for iterating with bitset …\nA typed wrapper around <code>UntypedComponentStore</code>.\nA collection of <code>ComponentStore&lt;T&gt;</code>.\nA <code>StageLabel</code> for the 5 core stages.\nError creating ID\nResource that is automatically added to the world while a …\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nHolds a list of alive entities.\nIterator over entities returned by <code>Entities::iter_with</code>.\nAn entity index.\nIterator over entities using the provided bitset.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nVariant for fast PRNGs, like Wyrand.\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nThe first stage\nTrait for enabling creating new <code>TurboCore</code> instances from …\nTrait implemented for types that can produce an instance …\nCreates an instance of the type this trait is implemented …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nThe system input parameter.\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nConverts a function into a <code>System</code>.\nThe ID is in the wrong format.\nThe type of the array’s elements.\nThe type of iterator this query item creates\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe fifth stage\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nMore than one entity matches the query.\nThe name of a field.\nNo entity matches the query.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nHelper func to construct a <code>OptionalQueryItem</code> wrapping a …\nHelper func to construct a <code>OptionalQueryItemMut</code> wrapping a …\nWrapper for the <code>Comp</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nWrapper for the <code>CompMut</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nowns T\nowns T\nThe type of the parameter, ranging over the lifetime of …\nThe fourth stage\nThe second stage\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA type representing a component-joining entity query.\nAn error that may occur when querying for a single entity. …\nWrapper for a borrowed <code>AtomicCell</code> that will released lock …\nWrapper for mutably borrowed <code>AtomicCell</code> that will released …\n<code>SystemParam</code> for getting read access to a resource.\n<code>SystemParam</code> for getting read access to a resource and …\n<code>SystemParam</code> for getting mutable access to a resource.\n<code>SystemParam</code> for getting mutable access to a resource and …\nA collection of resources.\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nVariant for slower PRNGs, like ChaCha8.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA collection of systems that will be run in order.\nA <code>Vec</code>-like container that can store a small number of …\nTrait for things that may be used to identify a system …\nThe intermediate state for the parameter, that may be …\nStruct containing a static system.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nThe type of the system that is output\nTrait implemented by systems.\nTrait used to implement parameters for <code>System</code> functions.\nTrait for system stages. A stage is a\nAn ordered collection of <code>SystemStage</code>s.\nA fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA wrapper struct that marks it unsafe to both create and …\nAn untyped atomic component store.\nIterates over components using a provided bitset. Each …\nIterates over components using a provided bitset. Each …\nIterate over component store returning …\nIterate mutably over component store returning …\nHolds components of a given type indexed by <code>Entity</code>.\nMutable iterator over pointers in an untyped component …\nMutable iterator over pointers in an untyped component …\nAn untyped resource that may be inserted into …\nStorage for un-typed resources.\nHelper trait for unwraping each item in an array.\nThe third stage\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nThe <code>World</code> is simply a collection of <code>Resources</code>, and …\nAdd a system to be run at the end of the stage.\nAdd a system that will run each frame until it succeeds …\nAdd a system that will run only once, before all of the …\nAdd a system to this stage.\nAdd a <code>System</code> to the stage with the given label.\nReturns a list of all <code>Entity</code>s cloned into a new vec.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nModify the iteration bitset\nDereferences and returns result wrapped in the <code>Ref</code>.\nDereferences and returns result wrapped in the <code>RefMut</code>.\nConverts reference and returns result wrapped in the <code>RefMut</code>…\nReturns a raw pointer to the underlying data in this cell.\nConverts reference and returns result wrapped in the <code>Ref</code>.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nReturns if all bits are set.\nBitwise AND.\nBitwise AND after NOT of rhs.\nReturns if any bits are set.\nConditionally sets or resets the given bit.\nCounts the number of set bits.\nReturns if the two bitsets have no bits in common.\nReturns if the two bitsets are equal.\nFlips the given bit.\nFormat the bits.\nInitializes all bits.\nReturns total number of bits.\nBitwise combine with MASK.\nReturns if none of the bits are set.\nBitwise NOT.\nBitwise OR.\nResets the given bit.\nSets the given bit.\nReturns if self is a subset of rhs.\nReturns if self is a superset of rhs.\nReturns if the given bit is set.\nBitwise XOR.\nShorthand for combining bitsets with bit_or.\nGet bitset of <code>ComponentStore</code> / implementor.\nReturns the bitset indicating which entity indices have a …\nRead the bitset containing the list of entites with this …\nReturns a bitset where each index where the bit is set to …\nShorthand for setting bits on the bitset container.\nReturns a random boolean value.\nThis is used create an instance of the system parame, …\nImmutably borrows the wrapped value.\nBorrow the resource.\nLock the resource for reading.\nMutably borrows the wrapped value.\nMutably borrow the resource.\nLock the resource for read-writing.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nClears the killed entity list.\nClone the inner data, creating a new copy instead of …\nThe function pointer that may be used to clone data with …\nGet <code>ComponentStore</code> for usage with generic types …\nStores the world components.\nThe number of components (enabled bits in the <code>inner</code> …\nThe number of components (enabled bits in the <code>inner</code> …\nCheck whether or not this component store has data for the …\nCheck whether or not the bitset contains the given entity.\nCheck whether or not this component store has data for the …\nCheck whether or not the resource with the given ID is …\nCheck whether or not a resource is in the store.\nCheck whether or not a cell for the given resource has …\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nCreates a new <code>Entity</code> and returns it.\nCreates a bitset big enough to contain the index of each …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nThe function pointer that may be used to write a default …\nThe function that may be used to deserialize the type.\nGenerate a random digit in the given <code>radix</code>.\nThe function pointer that may be used to drop data with …\nInitialize a new, empty <code>UntypedResource</code>.\nCreate a new, empty resource cell.\nThe function pointer that may be used to compare two …\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nFills a mutable buffer with random bytes.\nMakes a new <code>Ref</code> for an optional component of the borrowed …\nMakes a new <code>RefMut</code> for an optional component of the …\nGet the first entity and components in the given query.\nGet the first entity in the given bitset.\nCreate an <code>UntypedComponentStore</code> that is valid for the …\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nThe number of enabled bits discovered in the query bitset. …\nThe number of enabled bits discovered in the query bitset. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>UntypedResource</code> for the given schema, …\nReturn the data for the type.\nCreates a <code>ComponentStore</code> from an <code>UntypedComponentStore</code>.\nCreate from an <code>UntypedResource</code>.\nCreates <code>Self</code> using data from the given <code>World</code>.\nThe full name of the type, including any module specifiers.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns the generation of this <code>Entity</code>.\nGet a reference to the component storage for the given …\nGets an immutable reference to the component of <code>Entity</code>.\nBorrow a component store.\nBorrow the resource for the given schema.\nBorrow a resource.\nGet the untyped component storage by the component’s …\nGet the components of a certain type\nGet a cell for the resource with the given schema.\nGets a clone of the resource cell for the resource of the …\nGet the untyped component storage by the component’s …\nGet the first entity and components in the given query.\nGet the first entity in the given bitset.\nGet mutable references s to the component data for …\nGet mutable references to the component data for multiple …\nGet <code>SchemaRefMut</code>s to the component data for multiple …\nReturns a mutable reference to the underlying data.\nGet a mutable reference to the component storage for the …\nGets a mutable reference to the component of <code>Entity</code>.\nBorrow a resource.\nGet a mutable reference to component storage for the given …\nGet a mutable reference to component if it exists. …\nGet a <code>SchemaRef</code> to the component for the given <code>Entity</code> if …\nGet a <code>SchemaRefMut</code> to the component for the given <code>Entity</code>\nShortens a type name to remove all module paths.\nGets a mutable reference to the component if there is …\nGets a mutable reference to the component if there is …\nGet a single entity and components in the given query if …\nGets an immutable reference to the component if there is …\nReturn the item that matches the query within the given …\nGet a reference to the component store if there is exactly …\nGets an immutable reference to the component if there is …\nGets an immutable reference to the component if there is …\nGet a mutable reference to the component store if there is …\nGets a mutable reference to the component if there is …\nThis is called to produce the intermediate state of the …\nWhether or not the startup systems have been run yet.\nThe function pointer that may be used to hash the value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nThe unique identifier for the stage.\nReturns a unique identifier for the stage.\nThe unique identifier for the stage.\nImplements the <code>BitSet</code> trait members for your type through …\nReturns a <code>usize</code> value for stable indexing across different …\nReturns the index of this <code>Entity</code>.\nInitialize the resource using it’s <code>FromWorld</code> …\nBorrow the resource, initializing it if it doesn’t exist.\nBorrow the resource, initializing it if it doesn’t exist.\nThe component bitset iterator.\nThe component bitset iterator.\nInsert component data for the given entity and get the …\nInsert resource data into the cell, returning the previous …\nInserts a component for the given <code>Entity</code> index. Returns …\nInsert a resource.\nInsert component data for the given entity and get the …\nThis is an advanced use-case function that allows you to …\nReturns true if the entity already had a component of this …\nInsert a new stage, after another existing stage\nInsert a new stage, before another existing stage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConsumes the <code>AtomicCell</code>, returning the wrapped value.\nSplits wrapper into two parts. One is reference to the …\nSplits wrapper into two parts. One is reference to the …\nConvert into a typed <code>ComponentStore</code>.\nConverts to the internal, untyped <code>ComponentStore</code>.\nConsume <code>Resources</code> and extract the underlying …\nConvert into an untyped resource.\nChecks if the <code>Entity</code> is still alive.\nReturns a random <code>isize</code> within a given range bound.\nIterates immutably over all components of this type.\nIterates immutably over all components of this type. Very …\nIterates over all alive entities.\nIterates mutably over all components of this type.\nIterates mutably over all components of this type. Very …\nIterates mutable over the components of this type where …\nIterates mutable over the components of this type where …\nIterates mutable over the components of this type where …\nIterates mutably over the components of this type where …\nIterates mutably over the components of this type where …\nIterates mutably over the components of this type where …\nIterate over the entities and components in the given …\nIterates immutably over the components of this type where …\nReturn an iterator over the provided bitset.\nIterates immutably over the components of this type where …\nIterates immutably over the components of this type where …\nIterates over entities using the provided bitset.\nIterates immutably over the components of this type where …\nIterates immutably over the components of this type where …\nIterates immutably over the components of this type where …\nKill an entity.\nKills all entities.\nReturns entities in the killed list.\nThe kind of schema.\nThe layout of the type.\nConvert into a reference to the underlying data.\nConvert into a reference to the underlying data.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nMakes a new <code>Ref</code> for a component of the borrowed data.\nMakes a new <code>RefMut</code> for a component of the borrowed data.\nSplits a <code>Ref</code> into multiple <code>Ref</code>s for different components …\nSplits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …\nThe human-readable name for the stage, used for error …\nReturns the human-readable name of the label, used in …\nGet a best-effort name for the system, used in diagnostics.\nThe human-readable name for the stage, used for error …\nA best-effort name for the system, for diagnostic purposes.\nThe name of the field, if set.\nThe name of the field, if set.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nCreates a new <code>AtomicCell</code> containing value.\nWraps external reference into <code>Ref</code>.\nCreate a arbitrary <code>UntypedComponentStore</code>.\nWraps external reference into <code>RefMut</code>.\nCreates a new <code>UntypedResource</code> storing the given data.\nCreate a new, empty stage, for the given label.\nCreates a new <code>Entity</code> from the provided index and …\nCreate an empty <code>UntypedResources</code>.\nCreate an empty <code>Resources</code>.\nCreate a new resource cell with the given data.\nPartially shuffles a slice by a given amount and returns …\nThe number of enabled bits in the input bitset.\nThe number of enabled bits in the input bitset.\nThe system queue that will be run at the end of the stage\nRegister this schema with the global schema registry.\nRemove the component data for the entity if it exists.\nRemove the resource data, returning what was stored in it.\nRemoves the component of <code>Entity</code>. Returns <code>Some(T)</code> if the …\nRemove a resource from the store, if it is present.\nRemove the resource from the cell, leaving the cell empty.\nRemove all systems from this stage.\nRemove all systems from all stages, including startup and …\nRemove the component data for the entity if it exists.\nIf there is a previous value, <code>true</code> will be returned.\nReplaces the wrapped value with a new one, returning the …\nReplaces the wrapped value with a new one computed from f, …\nReseeds the <code>SeededCore</code> with a new seed/state.\nRemove all systems from all stages, including startup and …\nStores the world resources.\nExecute the systems on the given <code>world</code>.\nRun the system.\nExecute the systems on the given <code>world</code>.\nThis is run every time the system is executed\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nGet this type’s <code>Schema</code>.\nGet the schema of the components stored.\nGet the schema of the resource.\nThe schema of this variant.\nThe schema of the field.\nThe registered schemas.\nSet an entity on the the bitset.\nShuffles a slice randomly in O(n) time.\nSystems that are continously run until they succeed(return …\nGet a single entity and components in the given query if …\nReturns the number of items the array can hold.\nMakes a new <code>Ref</code> for a sub-slice of the borrowed slice.\nMakes a new <code>RefMut</code> for a sub-slice of the borrowed slice.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nThe stages in the collection, in the order that they will …\nThe systems that should run at startup.\nSwaps the wrapped value of self with the wrapped value of …\nConvert into a <code>System</code>.\nThe list of systems in the stage.\nThe layout of the enum tag.\nTakes the wrapped value, leaving <code>Default::default()</code> in its …\nConstruct a new <code>SmallVec</code> from a slice.\nTransposes a <code>Ref</code> of an <code>Option</code> into an <code>Option</code> of a <code>Ref</code>. …\nTransposes a <code>RefMut</code> of an <code>Option</code> into an <code>Option</code> of a <code>RefMut</code>…\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nImmutably borrows the wrapped value, returning <code>None</code> if the …\nMutably borrows the wrapped value, returning an error if …\nImmutably borrows the wrapped value, returning <code>None</code> if the …\nMutably borrows the wrapped value, returning <code>None</code> if the …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nGet a reference to the component storage for the given …\nGet mutable references s to the component data for …\nGet a mutable reference to the component storage for the …\nInsert component data for the given entity and get the …\nInsert component data for the given entity and get the …\nRemove the component data for the entity if it exists.\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nUndo the effect of leaked guards on the borrow state of …\nHints to the compiler that the branch condition is …\nBorrow the underlying <code>UntypedResources</code> store.\nUnwrap all the items in an array.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nWraps external reference into <code>Ref</code>. And associates it with …\nWraps external reference into <code>RefMut</code>. And associates it …\nCreate a <code>SystemStages</code> collection, initialized with a stage …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nA handle to a resource from a <code>Resources</code> collection.\nAn untyped, atomic resource cell.\nError thrown when a resource cell cannot be inserted …\nA collection of resources.\nAn untyped resource that may be inserted into …\nStorage for un-typed resources.\nA resource containing the <code>Commands</code> command queue.\nA <code>SystemParam</code> that can be used to schedule systems that …\nA <code>StageLabel</code> for the 5 core stages.\nResource that is automatically added to the world while a …\nThe first stage\nThe fifth stage\nThe fourth stage\nThe second stage\nA collection of systems that will be run in order.\nTrait for things that may be used to identify a system …\nTrait for system stages. A stage is a\nAn ordered collection of <code>SystemStage</code>s.\nThe third stage\nAdd a system to this stage.\nWhether or not the startup systems have been run yet.\nThe unique identifier for the stage.\nReturns a unique identifier for the stage.\nThe unique identifier for the stage.\nThe human-readable name for the stage, used for error …\nReturns the human-readable name of the label, used in …\nThe human-readable name for the stage, used for error …\nThe system queue that will be run at the end of the stage\nRemove all systems from this stage.\nExecute the systems on the given <code>world</code>.\nSystems that are continously run until they succeed(return …\nThe stages in the collection, in the order that they will …\nThe systems that should run at startup.\nThe list of systems in the stage.\n<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.\n<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.\nThe system input parameter.\nConverts a function into a <code>System</code>.\nThe type of the parameter, ranging over the lifetime of …\n<code>SystemParam</code> for getting read access to a resource.\n<code>SystemParam</code> for getting read access to a resource and …\n<code>SystemParam</code> for getting mutable access to a resource.\n<code>SystemParam</code> for getting mutable access to a resource and …\nThe intermediate state for the parameter, that may be …\nStruct containing a static system.\nThe type of the system that is output\nTrait implemented by systems.\nTrait used to implement parameters for <code>System</code> functions.\nThis is used create an instance of the system parame, …\nThis is called to produce the intermediate state of the …\nGet a best-effort name for the system, used in diagnostics.\nA best-effort name for the system, for diagnostic purposes.\nRun the system.\nThis is run every time the system is executed\nConvert into a <code>System</code>.\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nThe duration of one second.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nThe internal duration between this point and another.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nThe current time, expressed in milliseconds since the Unix …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nThe internal duration between this point and another.\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nA mutable memory location with dynamically checked borrow …\nAn atomic component store.\nA handle to a resource from a <code>Resources</code> collection.\nAn untyped, atomic resource cell.\nBitSet formatter.\nThe BitSet API.\nThe type of bitsets used to track entities in component …\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nhas a reference to T\nhas a reference to T\nThe represents a <code>SchemaBox</code> with given type inside.\nOverflow <code>usize::MAX</code> or other error during size computation\nError thrown when a resource cell cannot be inserted …\nError type for APIs with fallible heap allocation\nA resource containing the <code>Commands</code> command queue.\nA <code>SystemParam</code> that can be used to schedule systems that …\n<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.\n<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.\nRead-only iterator over components matching a given bitset\nMutable iterator over components matching a given bitset\nRead-only iterator over components matching a given bitset.\nMutable iterator over components matching a given bitset. …\nThis trait factors out functions for iterating with bitset …\nA typed wrapper around <code>UntypedComponentStore</code>.\nA collection of <code>ComponentStore&lt;T&gt;</code>.\nA <code>StageLabel</code> for the 5 core stages.\nError creating ID\nResource that is automatically added to the world while a …\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nHolds a list of alive entities.\nIterator over entities returned by <code>Entities::iter_with</code>.\nAn entity index.\nIterator over entities using the provided bitset.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nVariant for fast PRNGs, like Wyrand.\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nThe first stage\nTrait for enabling creating new <code>TurboCore</code> instances from …\nTrait implemented for types that can produce an instance …\nCreates an instance of the type this trait is implemented …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThe <code>Game</code> encompasses a complete bones game’s logic, …\nTrait for plugins that can be installed into a <code>Game</code>.\nThis trait provides the means to easily generate all …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nThe system input parameter.\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nConverts a function into a <code>System</code>.\nThe ID is in the wrong format.\nThe type of the array’s elements.\nThe type of iterator this query item creates\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe fifth stage\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nMore than one entity matches the query.\nThe name of a field.\nNo entity matches the query.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nHelper func to construct a <code>OptionalQueryItem</code> wrapping a …\nHelper func to construct a <code>OptionalQueryItemMut</code> wrapping a …\nWrapper for the <code>Comp</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nWrapper for the <code>CompMut</code> <code>SystemParam</code> used as <code>QueryItem</code> to …\nowns T\nowns T\nThe type of the parameter, ranging over the lifetime of …\nThe fourth stage\nThe second stage\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA type representing a component-joining entity query.\nAn error that may occur when querying for a single entity. …\nWrapper for a borrowed <code>AtomicCell</code> that will released lock …\nWrapper for mutably borrowed <code>AtomicCell</code> that will released …\n<code>SystemParam</code> for getting read access to a resource.\n<code>SystemParam</code> for getting read access to a resource and …\n<code>SystemParam</code> for getting mutable access to a resource.\n<code>SystemParam</code> for getting mutable access to a resource and …\nA collection of resources.\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nVariant for slower PRNGs, like ChaCha8.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA bones game. This includes all of the game worlds, and …\nType of session command\nResource that allows you to configure the current session.\nTrait for plugins that can be installed into a <code>Session</code>.\nA session runner is in charge of advancing a <code>Session</code> …\nContainer for multiple game sessions.\nA collection of systems that will be run in order.\nA <code>Vec</code>-like container that can store a small number of …\nTrait for things that may be used to identify a system …\nThe intermediate state for the parameter, that may be …\nStruct containing a static system.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nThe type of the system that is output\nTrait implemented by systems.\nTrait used to implement parameters for <code>System</code> functions.\nTrait for system stages. A stage is a\nAn ordered collection of <code>SystemStage</code>s.\nA fast, non-cryptographic, thread-local random number …\nA clock that tracks how much it has advanced (and how much …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA wrapper struct that marks it unsafe to both create and …\nAn untyped atomic component store.\nIterates over components using a provided bitset. Each …\nIterates over components using a provided bitset. Each …\nIterate over component store returning …\nIterate mutably over component store returning …\nHolds components of a given type indexed by <code>Entity</code>.\nMutable iterator over pointers in an untyped component …\nMutable iterator over pointers in an untyped component …\nAn untyped resource that may be inserted into …\nStorage for un-typed resources.\nHelper trait for unwraping each item in an array.\nThe third stage\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nThe <code>World</code> is simply a collection of <code>Resources</code>, and …\nWhether or not this session should have it’s systems run.\nWhether or not this session should be active after this …\nAdd a system to this stage.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nModify the iteration bitset\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nReturns if all bits are set.\nBitwise AND.\nBitwise AND after NOT of rhs.\nReturns if any bits are set.\nConditionally sets or resets the given bit.\nCounts the number of set bits.\nReturns if the two bitsets have no bits in common.\nReturns if the two bitsets are equal.\nFlips the given bit.\nFormat the bits.\nInitializes all bits.\nReturns total number of bits.\nBitwise combine with MASK.\nReturns if none of the bits are set.\nBitwise NOT.\nBitwise OR.\nResets the given bit.\nSets the given bit.\nReturns if self is a subset of rhs.\nReturns if self is a superset of rhs.\nReturns if the given bit is set.\nBitwise XOR.\nShorthand for combining bitsets with bit_or.\nGet bitset of <code>ComponentStore</code> / implementor.\nShorthand for setting bits on the bitset container.\nReturns a random boolean value.\nThis module contains types that can be used to implement …\nThis is used create an instance of the system parame, …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nThe function pointer that may be used to clone data with …\nGet <code>ComponentStore</code> for usage with generic types …\nStores the world components.\nThe number of components (enabled bits in the <code>inner</code> …\nThe number of components (enabled bits in the <code>inner</code> …\nCheck whether or not this component store has data for the …\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nCreates a bitset big enough to contain the index of each …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nThe function pointer that may be used to write a default …\nWhether or not this session should be deleted.\nThe function that may be used to deserialize the type.\nGenerate a random digit in the given <code>radix</code>.\nDisable the capture of local input by this session.\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nThe number of enabled bits discovered in the query bitset. …\nThe number of enabled bits discovered in the query bitset. …\nReturn the data for the type.\nCreates <code>Self</code> using data from the given <code>World</code>.\nThe full name of the type, including any module specifiers.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nGets a mutable reference to the component if there is …\nGets an immutable reference to the component if there is …\nReturn the item that matches the query within the given …\nThis is called to produce the intermediate state of the …\nWhether or not the startup systems have been run yet.\nThe function pointer that may be used to hash the value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nThe unique identifier for the stage.\nReturns a unique identifier for the stage.\nThe unique identifier for the stage.\nImplements the <code>BitSet</code> trait members for your type through …\nReturns a <code>usize</code> value for stable indexing across different …\nThe component bitset iterator.\nThe component bitset iterator.\nInstall the plugin into the <code>Session</code>.\nInstall the plugin into the <code>Game</code>.\nReturns a random <code>isize</code> within a given range bound.\nIterates mutable over the components of this type where …\nIterates mutably over the components of this type where …\nIterates immutably over the components of this type where …\nReturn an iterator over the provided bitset.\nIterates immutably over the components of this type where …\nThe kind of schema.\nThe layout of the type.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nThe human-readable name for the stage, used for error …\nReturns the human-readable name of the label, used in …\nGet a best-effort name for the system, used in diagnostics.\nThe human-readable name for the stage, used for error …\nA best-effort name for the system, for diagnostic purposes.\nThe name of the field, if set.\nThe name of the field, if set.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nPartially shuffles a slice by a given amount and returns …\nThe priority of this session relative to other sessions in …\nThe number of enabled bits in the input bitset.\nThe number of enabled bits in the input bitset.\nThe system queue that will be run at the end of the stage\nRegister this schema with the global schema registry.\nRemove all systems from this stage.\nReseeds the <code>SeededCore</code> with a new seed/state.\nStores the world resources.\nRestart Session Runner. This should reset accumulated …\nExecute the systems on the given <code>world</code>.\nRun the system.\nThis is run every time the system is executed\nThe session runner to use for this session.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nThe registered schemas.\nThe sessions that make up the game.\nCollection of resources that will have a shared instance …\nShuffles a slice randomly in O(n) time.\nSystems that are continously run until they succeed(return …\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nList of sorted session keys.\nThe system stages.\nThe stages in the collection, in the order that they will …\nThe systems that should run at startup.\nStep the simulation once.\nConvert into a <code>System</code>.\nThe collection of systems that are associated to the game …\nThe list of systems in the stage.\nThe layout of the enum tag.\nConstruct a new <code>SmallVec</code> from a slice.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nUnwrap all the items in an array.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nWhether or not this session should be rendered.\nWhether or not this session should be visible.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe ECS world for the core.\nThe layout that was passed to the allocator\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nA boolean.\nThe represents a <code>SchemaBox</code> with given type inside.\nType represents an enum, which in the C layout is called a …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\n<code>f32</code>\n<code>f64</code>\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\n<code>i128</code>\n<code>i16</code>\n<code>i32</code>\n<code>i64</code>\n<code>i8</code>\nType represents a <code>SchemaMap</code>.\nOpaque data that cannot described by a schema.\nA type of primitive.\nThe type represents a primitive value.\nSchema information describing the memory layout of a type.\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nA Rust <code>String</code>. Must be manipulated with Rust string …\nThe type represents a struct.\nA field in a <code>StructSchemaInfo</code>.\nSchema data for a struct.\n<code>u128</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u32</code>.\n<code>u32</code>\n<code>u64</code>\nA <code>u8</code>.\n<code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAllocation and collection utilities.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nThe prelude.\nSchema-aware smart pointers.\nTraits implementing raw function calls for cloning, …\nRegister this schema with the global schema registry.\nGlobal schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nSerde implementations for <code>Schema</code>.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe schema of the key type.\nThe schema of the value type.\nExtension trait for the <code>Layout</code> type that copies useful …\nA low-level memory allocation utility for creating a …\nIterator over items in a <code>ResizableAlloc</code>.\nMutable iterator over items in a <code>ResizableAlloc</code>.\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nIterator over <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nIterator over items in an <code>SVec</code>.\nUntyped schema-aware “HashMap”.\nA type-erased <code>Vec</code>-like collection that for items with the …\nIterator over <code>SchemaVec</code>.\nMutable iterator over <code>SchemaVec</code>.\nError type for <code>TypeDatas</code>\nA <code>TypeMap</code>-like structure, that does not allow removing …\nGet a raw pointer to the allocation.\nGet the capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow data from the store, if it exists.\nBorrow data from the store, if it exists.\nInsert data into the store.\nInsert boxed data into the store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nIterate over the allocation.\nIterate over type datas.\nIterate mutably over the allocation.\nGet the layout.\nCreate a new <code>ResizableAlloc</code> for the given memory layout. …\nto ensure that the following address will satisfy <code>align</code> …\nCreates a layout describing the record for <code>n</code> instances of …\nResize the buffer, re-allocating it’s memory.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nGet a pointer to the item with the given index without …\nCreate a new <code>ResizableAlloc</code> with the given capacity.\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\nTrait implemented for types that can produce an instance …\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nThe name of a field.\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nError type when attempting to cast between types with …\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA Ulid is a unique 128-bit lexicographically sortable …\nA wrapper struct that marks it unsafe to both create and …\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe function pointer that may be used to clone data with …\nThe function pointer that may be used to write a default …\nThe function that may be used to deserialize the type.\nThe function pointer that may be used to drop data with …\nThe function pointer that may be used to compare two …\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe function pointer that may be used to hash the value.\nThe kind of schema.\nThe layout of the type.\nThe name of the field, if set.\nThe name of the field, if set.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nRegister this schema with the global schema registry.\nGet this type’s <code>Schema</code>.\nThe schema of this variant.\nThe schema of the field.\nThe registered schemas.\nThe layout of the enum tag.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nhas a reference to T\nhas a reference to T\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe ID is in the wrong format.\nThe type of the array’s elements.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nowns T\nowns T\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA <code>Vec</code>-like container that can store a small number of …\nA fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nReseeds the <code>SeededCore</code> with a new seed/state.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nConstruct a new <code>SmallVec</code> from a slice.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nThe allocator return an error\nTypes that can be used as the backing store for a <code>SmallVec</code>.\nhas a reference to T\nhas a reference to T\nOverflow <code>usize::MAX</code> or other error during size computation\nError type for APIs with fallible heap allocation\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nAn iterator that removes the items from a <code>SmallVec</code> and …\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nAn iterator that consumes a <code>SmallVec</code> and yields its items …\nThe ID is in the wrong format.\nThe type of the array’s elements.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThis type provides a way to store data to which you either …\nThis type is basically the same as <code>MaybeOwned</code>, but works …\nowns T\nowns T\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nA <code>Vec</code>-like container that can store a small number of …\nA fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nConvenience re-export of common traits, structs and utils.\nReseeds the <code>SeededCore</code> with a new seed/state.\nA fast but <strong>not</strong> cryptographically secure PRNG based on …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nConstruct a new <code>SmallVec</code> from a slice.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nUtilities related to FFI bindings.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nAttempts to shrink the memory block.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nA priority queue implemented with a binary heap.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA doubly-linked list with owned nodes.\nA double-ended queue (deque) implemented with a growable …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\n<code>CString</code> and its related types.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nThe <code>write</code> function takes an output stream, and an <code>Arguments</code>…\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nImplementation of <code>[T]::concat</code>\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nImplementation of <code>[T]::join</code>\nPerforms bounds-checking of a range.\nPerforms bounds-checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nConverts a boxed slice of bytes to a boxed string slice …\nCreates an <code>&amp;str</code> from a pointer and a length.\nCreates an <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nThe string Pattern API.\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nGetter for the underlying string to be searched in\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nAn analogous trait to <code>Wake</code> but used to construct a …\nThe implementation of waking a task on an executor.\nWake this task.\nWake this task.\nWake this task without consuming the waker.\nWake this task without consuming the local waker.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nThe actual reader/writer we are wrapping.\nReturns a stream over the lines of this byte stream.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncBufRead</code>.\nExtension trait for <code>Stream</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>AsyncWrite</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nA builder for default Fx hashers.\nA <code>HashMap</code> using a default Fx hasher.\nA <code>HashSet</code> using a default Fx hasher.\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nA convenience function for when you need a quick usize …\nA convenience function for when you need a quick 32-bit …\nA convenience function for when you need a quick 64-bit …\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nChecks if this value is equivalent to the given key.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nA Condition Variable\nA closure has completed successfully.\nA mutual exclusive primitive that is always fair, useful …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread is currently executing a closure.\nAn RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA closure has not been executed yet\nA synchronization primitive which can be used to run a …\nCurrent state of a <code>Once</code>.\nA closure was executed but panicked.\nRaw fair mutex type backed by the parking lot.\nRaw mutex type backed by the parking lot.\nRaw reader-writer lock type backed by the parking lot.\nImplementation of the <code>GetThreadId</code> trait for …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nA type indicating whether a timed wait on a condition …\nCreates a new fair mutex in an unlocked state ready for …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nDuration type used for <code>try_lock_for</code>.\nDuration type used for <code>try_lock_for</code>.\nHelper trait which returns a non-zero thread ID.\nMarker type which determines whether a lock guard should …\nMarker type which determines whether a lock guard should …\nMarker type which indicates that the Guard type for a lock …\nMarker type which indicates that the Guard type for a lock …\nInitial value for an unlocked mutex.\nInitial value.\nInitial value for an unlocked <code>RwLock</code>.\nInstant type used for <code>try_lock_until</code>.")