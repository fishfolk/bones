searchState.loadedDescShard("bones_matchmaker_proto", 0, "Network protocol structs for the Bones matchmaker.\nThe connection has been accepted\nSend the message to all connected clients.\nRequest to create a new lobby\nAn error message\nA unique identifier for a game\nRequest to join an existing lobby for a specific gameid, …\nRequest a list of lobbies for a specific game\nA list of available lobbies\nConfirmation that a lobby has been created\nA unique identifier for a lobby\nInformation about a lobby\nConfirmation that a client has joined a lobby\nInformation about a lobby for the lobby list\nResponse that specifies updates about the current lobby …\nALPN used for the matchmaking protocol.\nInformation about a match that is being requested\nRequests that may be made in matchmaking mode\nResponses that may be returned in matchmaking mode\nResponse that specifies updates about the current …\nSend the message to the client with the specified index.\nThe players will be assigned an idx based on the order …\nALPN used for the direct connections between players.\nChoose how player_idx should be assigned to each player …\nThe players will randomly be assigned an idx\nThe format of a message forwarded by the proxy to a client.\nRequest to have the client join matchmaking queue\nThe format of a message sent by a client to the proxy, so …\nThe order specified in the Vec will be assigned to the …\nRequest to remove the client from the matchmaking queue\nThe desired client count has been reached, and the match …\nThe client to send a network message to.\nThe current number of players in the lobby\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe client that the message came from.\nThe unique identifier for the game\nThe unique identifier for the game\nThe unique identifier for the game this lobby belongs to\nWhether the lobby is password protected\nThe unique identifier of the lobby\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is an arbitrary set of bytes that must match exactly …\nThis is an arbitrary set of bytes that the lobby creator …\nThe maximum number of players to have in a match.\nThe maximum number of players allowed in the lobby\nThe maximum number of players allowed in the lobby\nThe message data.\nThe message data.\nThe name of the lobby\nThe name of the lobby\nThe hashed password for the lobby, if any\nEnables choosing how player_idx should be assigned to each …\nEnables choosing how player_idx should be assigned to each …\nThe client that the message should go to.\nThe number of connected clients in the match\nThe node ids of all players.\nThe client idx of the current client\nThe random seed that each client should use.")