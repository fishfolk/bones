searchState.loadedDescShard("bones_utils", 0, "General utilities for Bones meta-engine crates.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nThe number of bits in a Ulid’s random portion\nA fast, non-cryptographic, thread-local random number …\nThe number of bits in a Ulid’s time portion\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nCreates a Crockford Base32 encoded string that represents …\nReturns a random boolean value.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nGets the datetime of when this Ulid was created accurate …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns the argument unchanged.\nCreates a Ulid using the provided bytes array.\nCreates a new Ulid with the given datetime\nCreates a new Ulid with the given datetime and random …\nCreate a Ulid from separated parts.\nCreates a Ulid from a Crockford Base32 encoded string\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>i8</code> value.\nIncrement the random number, make sure that the ts millis …\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a <code>usize</code> value for stable indexing across different …\nCalls <code>U::from(self)</code>.\nTest if the Ulid is nil\nReturns a random <code>isize</code> within a given range bound.\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nGenerates a random <code>char</code> in the range a-z.\nCreates a new Ulid with the current time (UTC)\nThe ‘nil Ulid’.\nPartially shuffles a slice by a given amount and returns …\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nGets the random section of this ulid\nSamples a random item from a slice of values.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nShuffles a slice randomly in O(n) time.\nGets the timestamp section of this ulid\nReturns the bytes of the Ulid in big-endian order.\nCreates a Crockford Base32 encoded string that represents …\nCreates a Crockford Base32 encoded string that represents …\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new Ulid using data from the given random number …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nCreate a new labeled ID with the given prefix.\nCreate a new labeled ID with the given prefix and ULID.\nPartially shuffles a slice by a given amount and returns …\nGet the prefix of the ID.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGet the <code>Ulid</code> of the ID.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …")