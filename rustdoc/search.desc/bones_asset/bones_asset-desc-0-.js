searchState.loadedDescShard("bones_asset", 0, "An asset interface for Bones.\nLet <code>Path</code> and <code>PathBuf</code> have <code>absolutize</code> and …\nHelper type for storing asset extensions.\nAn identifier for an asset.\n<code>AssetIo</code> is a trait that is implemented for backends …\nA type data that indicates how to load a type as an asset.\nContext provided to custom asset loaders in the …\nThe progress that has been made loading the game assets.\nA custom assset loader.\nContains that path to an asset, and the pack_dir that it …\nA borrowed version of <code>AssetLoc</code>.\nAn asset pack contains assets that are loaded by the game.\nThe unique ID for an asset pack.\nA requirement specifier for an asset pack, made up of the …\nSpecifies an asset pack, and it’s exact version.\nStruct responsible for loading assets into it’s …\nThe inner state of the asset server.\nStores assets for later retrieval.\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nType alias for …\nThe <code>AssetPackId</code> of the core pack.\nAn ID for an asset that has changed.\nA unique content ID.\nYAML format for the core asset pack’s <code>pack.yaml</code> file.\nAn asset with a custom asset loader.\nDummy <code>AssetIo</code> implementation used for debugging or as a …\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\n<code>AssetIo</code> implementation that loads from the filesystem.\nTrait implemented for types that can produce an instance …\nA typed handle to an asset.\nThe <code>Cid</code> of an asset that has changed.\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAn error returned when an asset pack does not support the …\nAn asset that has been loaded.\nStruct containing all the game’s loaded assets, …\nThe location of an asset that has changed.\nThe display error message for this error type.\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nAn equivalent to <code>Option&lt;T&gt;</code> that has a stable memory layout …\nContext provided while loading a metadata asset.\nThis is a metadata asset that can be loaded from JSON or …\nThe name of a field.\nAsset handle that may be replicated over network and …\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nYAML format for asset packs’ <code>pack.yaml</code> file.\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nType data for asset handles.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nA custom asset loader implementation for a metadata asset.\nError type when attempting to cast between types with …\nA schema reference, containing the ID of the pack that …\nThe load context for a <code>SchemaRefMut</code>.\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nThe value is set.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nThe value is not set.\nAn untyped handle to an asset.\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\n<strong>SemVer version</strong> as defined by https://semver.org.\nAsset IO implementation that loads assets from a URL.\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nGet a helper to access the inner data.\nGet a mutable access helper to this reference.\nReturns <code>Unset</code> if the option is <code>Unset</code>, otherwise returns …\nReturns <code>Unset</code> if the option is <code>Unset</code>, otherwise calls <code>f</code> …\nBorrow the schema ref as a <code>SchemaBox</code> if it is one.\nGet the enum, if this is a enum.\nBorrow the schema ref as a <code>SchemaMap</code> if it is one.\nBorrow this box as a <code>SchemaRefMut</code>.\nConverts from <code>&amp;mut Maybe&lt;T&gt;</code> to <code>Maybe&lt;&amp;mut T&gt;</code>.\nConvert back to a <code>SchemaRefMut</code>\nGet the primitive, if this is a primitive.\nGet the raw pointer\nGet a raw pointer to the box data.\nGet the pointer.\nBorrow this <code>SchemaRefMut</code> as a <code>SchemaRef</code>.\nBorrow this <code>SchemaRefMutAccess</code> as a <code>SchemaRefAccess</code>.\nConvert to an immutable <code>PrimitiveRef</code>.\nBorrow this box as a <code>SchemaRef</code>.\nConverts from <code>&amp;Maybe&lt;T&gt;</code> to <code>Maybe&lt;&amp;T&gt;</code>.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nConvert to a <code>SchemaRef</code>.\nGet the struct, if this is a struct.\nGet the schema of the items in the vector, if this is a …\nBorrow the schema ref as a <code>SchemaVec</code> if it is one.\nReceiver for asset changes, used to implement hot reloads.\nSender for asset changes, used by the <code>AssetIo</code> …\nContent addressed cache of raw bytes for asset data.\nMaps the handle of the asset to it’s content ID.\nHelper function to return type data for a custom asset …\nThe asset server.\nThe base URL to load assets from.\nMaps asset content IDs, to assets that have been loaded by …\nGet the capacity of the backing buffer.\nGet the capacity of the vec.\nCast a reference of this type to a reference of another …\nCast this pointer to a reference to a type with a matching …\nCast this box to it’s inner type and return it.\nCast this pointer to a mutable reference to a type with a …\nCast this pointer to a mutable reference.\nUnsafely convert this box into an owned T.\nUnsafely cast this pointer to a specifc Rust type.\nCast a mutable reference of this type to a reference of …\nCast this pointer to a reference to a type with a matching …\nCast this box to a mutable reference to a type with a …\nCast this pointer to a mutable reference.\nCast this box to a reference to a type with a …\nUnsafely cast this pointer to a specifc Rust type.\nThe content ID of the loaded asset.\nContent id of the asset, used to lookup asset from …\nClears the vector, removing all values.\nClears the vector, removing all values.\nThe function pointer that may be used to clone data with …\nClone this schema ref into a new box.\nCompare the major, minor, patch, and pre-release value of …\nCalculate the layout of the type represented by the schema.\nReturns <code>true</code> if the option is a <code>Set</code> value containing the …\nReturns true if the map contains a value for the specified …\nThe directory to load the core asset pack.\nThe core asset pack, if it’s been loaded.\nThe metadata asset load context.\nThe loaded data of the asset.\nDebug format the value stored in the schema box.\nCreate a new <code>SchemaBox</code> for a type with a <code>Schema</code> that has a …\nThe game’s default asset pack.\nThe function pointer that may be used to write a default …\nThe <code>Cid</code>s of the assets this asset depends on.\nThe dependency list of this asset. This should be updated …\nThe content IDs of any assets needed by this asset as a …\nUse this <code>SchemaDeserialize</code> to deserialize data from the …\nThe function that may be used to deserialize the type.\nThe function pointer that may be used to drop data with …\nList the names of the non-core asset pack folders that are …\nThe function pointer that may be used to compare two …\nReturns the contained <code>Set</code> value, consuming the <code>self</code> value.\nExtends the vector with the contents of an iterator.\nGet the reference to a field.\nGet field with the given index.\nGet the reference to a field.\nGet field with the given index.\nAccess a field, if it exists.\nIf this is a struct, then the field offsets will contain …\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nGet the field pointed to by the given path.\nIterate over fields in the struct.\nInterate over the fields on the struct.\nThe fields in the struct, in the order they are defined.\nReturns <code>Unset</code> if the option is <code>Unset</code>, otherwise calls …\nReturns a reference to the first element of the vector, or …\nReturns a mutable reference to the first element of the …\nDeallocate the memory stored in the box, but don’t run …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>SchemaRefMut</code> from a raw pointer and it’s …\nCreate a new <code>SchemaRef</code> from a raw pointer and it’s …\nCreate a new <code>SchemaBox</code> from raw parts.\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nThe version of the game. This is used to evaluate whether …\nThe game <code>VersionReq</code> this asset pack is compatible with.\nThe required game version to be compatible with this asset …\nThe version of the game that the pack is not compatible …\nGet an item in the vec.\nGet a reference to an item in the map.\nUnsafely get the inner value.\nGet an item from the vec.\nGet a value out of the map for the given key.\nGet an item in the vec.\nGet a mutable reference to an item in the map.\nGet an item from the vec.\nGet a value out of the map for the given key.\nInserts <code>v</code> into the option if it is <code>Unset</code>, then returns a …\nInserts a value computed from <code>f</code> into the option if it is …\nGet the item with the given index.\nGet an untyped reference to an item in the map.\nGet an item with the given index.\nGet an untyped reference to an item in the map.\nSafety\nSafety\nRecursively checks whether or not the schema contains any …\nGet the hash of this <code>SchemaVec</code>.\nGet the hash of this schema box, if supported.\nGet the hash of this schema box.\nGet the hash of the <code>SVec</code>.\nGet the hash of this schema box, if supported.\nThe function pointer that may be used to hash the value.\nThe runtime ID of the asset.\nThe unique ID of the asset pack.\nThe ID of the asset pack.\nThe asset pack ID.\nThe unique ID of the asset pack.\nLists the packs that have not been loaded due to an …\nGet the <code>StructSchemaInfo</code> for this struct.\nGet the enum schema info.\nGet the <code>StructSchemaInfo</code> for this struct.\nGet the enum schema info.\nThe asset server inner state.\nInsert an entry into the map, returning the previous …\nInsert an item into the map.\nInsert an untyped item into the map.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an accessor for the inner data.\nBorrow the schema ref as a <code>SchemaBox</code> if it is one.\nGet the reference to a field.\nAccess a field, if it exists.\nGet the field pointed to by the given path.\nConsume to create an iterator over fields in the struct.\nBorrow the schema ref as a <code>SchemaMap</code> if it is one.\nConvert into an <code>SBox</code> if the schema of T matches.\nConvert into a <code>SchemaBox</code>\nConvert into an untyped <code>SchemaMap</code>.\nBorrow this <code>SchemaRefMutAccess</code> as a <code>SchemaRefAccess</code>.\nConvert back to a <code>SchemaRefMut</code>\nConvert back to a <code>SchemaRefMut</code>\nConvert this to a <code>SchemaRefMut</code>.\nConvert back to a <code>SchemaRefMut</code>\nConvert to an untyped <code>SchemaVec</code>.\nConvert into a typed <code>SMap</code>.\nConvert into a typed <code>SVec</code>.\nBorrow the schema ref as a <code>SchemaVec</code> if it is one.\nThe <code>AssetIo</code> implementation used to load assets.\nReturns <code>true</code> if the vector has zero items in it.\nReturns true if the map contains no elements.\nReturns <code>true</code> if there are no items in the vector.\nReturns <code>true</code> if the map is empty.\nReturns <code>true</code> if the option is an <code>Unset</code> value.\nReturns <code>true</code> if the option is a <code>Set</code> value.\nReturns <code>true</code> if the option is a <code>Set</code> value.\nReturns <code>true</code> if the option is an <code>Unset</code> value.\nIterate over values in the vec\nIterate over entries in the map.\nIterate over references to the items in the vec.\nIterate over entries in the map.\nIterate mutably over values in the vec\nIterate over entries in the map.\nIterate over mutable references to the items in the vec.\nIterate over entries in the map.\nGet the schema for the map keys.\nIterate over keys in the map.\nIterate over keys in the map.\nThe kind of schema.\nReturns a reference to the last element of the vector, or …\nReturns a mutable reference to the last element of the …\nGet the memory layout of the enum tag.\nThe layout of the type.\nGet the number of items in the vector.\nReturns the number of elements in the map.\nGet the length of the vector.\nGet the number of entries in the map.\nLoad the asset from raw bytes.\nGet the binary contents of an asset.\nThe asset load progress.\nThe location of the asset.\nThe location that the asset is being loaded from.\nThe pack and path the asset was loaded from.\nMaps a <code>Maybe&lt;T&gt;</code> to <code>Maybe&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Maybe&lt;T&gt;</code> to <code>U</code> by applying a function to a contained …\nMaps a <code>Maybe&lt;T&gt;</code> to <code>U</code> by applying a function to a contained …\nHelper function to return type data for a metadata asset.\nThe display name of the asset pack.\nThe name of the schema.\nThe name of the field, if set.\nThe name of the field, if set.\nUser friendly pack name.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nInitialize an empty <code>SchemaVec</code> for items with the given …\nCreate <code>Version</code> with an empty pre-release and build …\nInitialize the <code>SMap</code>.\nCreate a new <code>SchemaRefMut</code> from a reference to a type that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code>.\nCreate a new <code>SchemaBox</code> from an owned type.\nCreate a new <code>SBox</code>.\nCreate a new <code>Unsafe</code> contianing the <code>value</code>.\nCreate a new, empty <code>SVec</code>.\nCreate a new map, with the given key and value schemas.\nCreate a new <code>SchemaRef</code> from a reference to a type that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code>.\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code> that …\nCreate a new <code>SchemaRefAccess</code> for the given <code>SchemaRef</code> that …\nTransforms the <code>Maybe&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping <code>Set(v)</code>…\nTransforms the <code>Maybe&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping <code>Set(v)</code>…\nConvert this <code>Maybe</code> into an <code>Option</code>.\nReturns the option if it contains a value, otherwise …\nReturns the option if it contains a value, otherwise calls …\nThe ID of the pack, or <code>None</code> if it refers to the core pack.\nThe pack_dir of the pack that the asset is in.\nThe pack_dir of the pack that the asset is in.\nThe unique ID of the asset pack this asset is located in.\nThe directory of the pack that\nMaps the directory names of asset packs to their …\nThe metadata of the pack that could not be loaded.\nThe asset pack this was loaded from, or <code>None</code> if it is from …\nExtra asset packs. The key is the the name of the asset …\nThe asset packs that have been loaded.\nThe directory to load the asset packs from.\nCreate <code>Version</code> by parsing from string representation.\nThe path to the asset in it’s pack.\nThe path to the asset in it’s pack.\nThe path to the asset, relative to the root of the asset …\nMaps the asset <code>AssetLoc</code> to it’s handle.\nPop an item off the vec.\nPop an item off of the vector.\nPop the last item off of the end of the vector.\nRemoves and returns the last element of the vector if the …\nThe prelude.\nThe pointer to load.\nPush an item to the vec.\nPush an item onto the vector.\nPush the item into the end of the vector.\nRaw version of the <code>eq()</code> function. Not meant for normal use.\nRaw version of the <code>hash()</code> function. Not meant for normal …\nConvert a borrowed <code>SchemaRefMut</code> to an owned <code>SchemaRefMut</code> …\nRegister a schema with the registry.\nRegister this schema with the global schema registry.\nRemove and return the element at position <code>index</code> within the …\nRemove an item from the map.\nRemove and return the element at position <code>index</code> within the …\nRemove an item.\nUntypededly remove an item.\nSafety\nReplaces the actual value in the option by the value given …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nReverses the order of elements in the vector, in place.\nList of assets that depend on the given assets.\nThe runtime ID of the handle\nThe root asset for the asset pack.\nThe path to the root asset for the pack.\nThe path to the root asset for the pack.\nGet this type’s <code>Schema</code>.\nGet the schema of items in this <code>SchemaVec</code>.\nGet the <code>Schema</code> for the pointer.\nGet the struct’s schema.\nGet the enum’s schema.\nGet the <code>Schema</code> for the pointer.\nGet the <code>Schema</code> for the pointer.\nGet the struct’s schema.\nGet the enum’s schema.\nThe schema of the asset being loaded.\nThe schema of this variant.\nThe schema of the field.\nSchemas provided in the asset pack.\nThe registered schemas.\nThe paths to schema definitions to be loaded from this …\nThe paths to schema definitions to be loaded from this …\nThe asset server.\nThe asset store.\nThe layout of the enum tag.\nTakes the value out of the option, leaving an <code>Unset</code> in its …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens the vector, keeping the first <code>len</code> elements and …\nCast a reference of this type to a reference of another …\nCast this pointer to a reference to a type with a matching …\nCast this box to it’s inner type and return it.\nCast this pointer to a mutable reference to a type with a …\nCast a mutable reference of this type to a reference of …\nCast this pointer to a mutable reference to a type with a …\nCast this box to a mutable reference to a type with a …\nCast this box to a reference to a type with a …\nGet an item in the vec.\nGet a value out of the map for the given key.\nGet an item in the vec.\nGet a value out of the map for the given key.\nGet an untyped reference to an item in the map.\nGet an untyped reference to an item in the map.\nGet the hash of this schema box, if supported.\nInsert an item into the map.\nInsert an untyped item into the map.\nConvert into an <code>SBox</code> if the schema of T matches.\nConvert into a typed <code>SMap</code>.\nTry to convert into a typed <code>SVec</code>.\nPop an item off the vec.\nPush an item to the vec.\nPush the item into the end of the vector.\nRemove an item.\nUntypededly remove an item.\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nAllocates a <code>SchemaBox</code> for the given <code>Schema</code>, but <strong>doesn’t </strong>…\nReturns the contained <code>Set</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Set</code> value or a provided default.\nReturns the contained <code>Set</code> value or a default.\nReturns the contained <code>Set</code> value or computes it from a …\nReturns the contained <code>Set</code> value, consuming the <code>self</code> value, …\nGet a reference to the enum’s currently selected value.\nGet a reference to the enum’s currently selected value.\nThe field’s value.\nThe field’s value.\nGet the schema for the map values.\nIterate over values in the map.\nIterate over values in the map.\nIterate over values in the map.\nIterate over values in the map.\nGet the currently-selected variant index.\nGet the currently-selected variant index.\nGet the <code>VariantInfo</code> for the current variant.\nGet the name of the currently selected variant.\nGet the name of the currently selected variant.\nGet the <code>StructSchemaInfo</code> for the current variant.\nInfo for the enum variants.\nThe version number of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nFilesystem watcher if enabled.\nClone <code>other</code> and write it’s data to <code>self</code>. Panics if this …\nReturns <code>Set</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Set</code>, otherwise …\nZips <code>self</code> with another <code>Maybe</code>.\nThe <code>extension</code> is the portion of the extension that comes …\nThe list of file extensions to load this asset from.\nThe loader implementation for the asset.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nThe number of bits in a Ulid’s random portion\nA fast, non-cryptographic, thread-local random number …\nThe number of bits in a Ulid’s time portion\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nCreates a Crockford Base32 encoded string that represents …\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nGets the datetime of when this Ulid was created accurate …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Ulid using the provided bytes array.\nCreates a new Ulid with the given datetime\nCreates a new Ulid with the given datetime and random …\nCreate a Ulid from separated parts.\nCreates a Ulid from a Crockford Base32 encoded string\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nIncrement the random number, make sure that the ts millis …\nReturns a <code>usize</code> value for stable indexing across different …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the Ulid is nil\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nCreate a new labeled ID with the given prefix.\nCreates a new Ulid with the current time (UTC)\nCreate a new labeled ID with the given prefix and ULID.\nThe ‘nil Ulid’.\nPartially shuffles a slice by a given amount and returns …\nGet the prefix of the ID.\nThe prelude.\nGets the random section of this ulid\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nGets the timestamp section of this ulid\nReturns the bytes of the Ulid in big-endian order.\nCreates a Crockford Base32 encoded string that represents …\nCreates a Crockford Base32 encoded string that represents …\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGet the <code>Ulid</code> of the ID.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new Ulid using data from the given random number …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nLet <code>Path</code> and <code>PathBuf</code> have <code>absolutize</code> and …\nHelper type for storing asset extensions.\nAn identifier for an asset.\n<code>AssetIo</code> is a trait that is implemented for backends …\nA type data that indicates how to load a type as an asset.\nContext provided to custom asset loaders in the …\nThe progress that has been made loading the game assets.\nA custom assset loader.\nContains that path to an asset, and the pack_dir that it …\nA borrowed version of <code>AssetLoc</code>.\nAn asset pack contains assets that are loaded by the game.\nThe unique ID for an asset pack.\nA requirement specifier for an asset pack, made up of the …\nSpecifies an asset pack, and it’s exact version.\nStruct responsible for loading assets into it’s …\nThe inner state of the asset server.\nStores assets for later retrieval.\nA <code>bool</code>\nA boolean.\nA <code>bool</code>\nThe represents a <code>SchemaBox</code> with given type inside.\nType alias for …\nThe <code>AssetPackId</code> of the core pack.\nAn ID for an asset that has changed.\nA unique content ID.\nYAML format for the core asset pack’s <code>pack.yaml</code> file.\nAn asset with a custom asset loader.\nDummy <code>AssetIo</code> implementation used for debugging or as a …\nAccess an enum.\nType represents an enum, which in the C layout is called a …\nAccess an enum.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nSchema data for an enum.\nA type for an enum tag for <code>EnumSchemaInfo</code>.\nAn <code>f32</code>\n<code>f32</code>\nAn <code>f32</code>\nAn <code>f64</code>\n<code>f64</code>\nAn <code>f64</code>\nThe index of a field in a struct in a <code>Schema</code>.\nA wrapper type that implements […\n<code>AssetIo</code> implementation that loads from the filesystem.\nTrait implemented for types that can produce an instance …\nA typed handle to an asset.\nThe <code>Cid</code> of an asset that has changed.\nTrait implemented for types that have a <code>Schema</code>.\nDerive macro for the HasSchema trait.\nAn <code>i128</code>\n<code>i128</code>\nAn <code>i128</code>\nAn <code>i16</code>\n<code>i16</code>\nAn <code>i16</code>\nAn <code>i32</code>\n<code>i32</code>\nAn <code>i32</code>\nAn <code>i64</code>\n<code>i64</code>\nAn <code>i64</code>\nAn <code>i8</code>\n<code>i8</code>\nAn <code>i8</code>\nThe index of a field. Works for tuple fields and named …\nAn error returned when an asset pack does not support the …\nAn asset that has been loaded.\nStruct containing all the game’s loaded assets, …\nThe location of an asset that has changed.\nAccess a map.\nType represents a <code>SchemaMap</code>.\nAccess a map.\nContext provided while loading a metadata asset.\nThis is a metadata asset that can be loaded from JSON or …\nThe name of a field.\nAsset handle that may be replicated over network and …\nAn opaque type\nOpaque data that cannot described by a schema.\nAn opaque type\nYAML format for asset packs’ <code>pack.yaml</code> file.\nA type of primitive.\nAccess a struct.\nThe type represents a primitive value.\nAccess a struct.\nHelper for accessing the inner data of a schema ref at …\nHelper for accessing the inner data of a schema ref at …\nA typed version of <code>SchemaBox</code>.\nGlobal <code>SchemaRegistry</code> used to register <code>SchemaData</code>s and …\nTyped version of a <code>SchemaMap</code>.\nA typed version of a <code>SchemaVec</code>.\nType data for asset handles.\nA owning, type-erased <code>Box</code>-like container for types with a …\nSchema information describing the memory layout of a type.\nDerivable schema <code>type_data</code> for types that implement …\nA struct that implements <code>DeserializeSeed</code> and can be used …\nError returned when a field is not found in a schema.\nA unique identifier for a schema registered in the …\nA schema describes the data layout of a type, to enable …\nLayout information computed for <code>SchemaData</code>.\nUntyped schema-aware “HashMap”.\nAccess helper for a <code>SchemaMap</code>.\nMutable <code>SchemaMap</code> access helper.\nA custom asset loader implementation for a metadata asset.\nError type when attempting to cast between types with …\nA schema reference, containing the ID of the pack that …\nThe load context for a <code>SchemaRefMut</code>.\nAn untyped reference that knows the <code>Schema</code> of the pointee …\nHelper for accessing the inner data of a schema ref at …\nAn untyped mutable reference that knows the <code>Schema</code> of the …\nAccess a schema\nA schema registry that alloates <code>SchemaId</code>s for <code>SchemaData</code>s …\nA struct that implements <code>Serialize</code> and wraps around a …\nA type-erased <code>Vec</code>-like collection that for items with the …\nAccess helper for a <code>SchemaVec</code>.\nMutable <code>SchemaVec</code> access helper.\nA <code>String</code>\nA Rust <code>String</code>. Must be manipulated with Rust string …\nA <code>String</code>\nAccess a struct.\nThe type represents a struct.\nAccess a struct.\nA field in a <code>StructSchemaInfo</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nHelper for accessing the inner data of a schema ref at …\nIterator for <code>StructRefAccess::fields()</code>.\nA field returned by <code>StructRefFieldIter</code>.\nSchema data for a struct.\nA <code>u128</code>\n<code>u128</code>\nA <code>u128</code>\nA <code>u16</code>\nA <code>u16</code>.\n<code>u16</code>\nA <code>u16</code>\nA <code>u32</code>\nA <code>u32</code>.\n<code>u32</code>\nA <code>u32</code>\nA <code>u64</code>\n<code>u64</code>\nA <code>u64</code>\nA <code>u8</code>\nA <code>u8</code>.\n<code>u8</code>\nA <code>u8</code>\nA wrapper struct that marks it unsafe to both create and …\nAn untyped handle to an asset.\nInformation about an enum variant for <code>EnumSchemaInfo</code>.\nAccess a vec.\nType represents a <code>SchemaVec</code>, where each item in the vec …\nAccess a vec.\n<strong>SemVer version</strong> as defined by https://semver.org.\nAsset IO implementation that loads assets from a URL.\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nGet an absolute path. This works even if the path does not …\nBorrow as an <code>AssetLocRef</code>.\nConverts a reference of <code>T</code> to a <code>SchemaRefMut</code>\nConverts a reference of <code>T</code> to a <code>SchemaRef</code>\nReceiver for asset changes, used to implement hot reloads.\nSender for asset changes, used by the <code>AssetIo</code> …\nContent addressed cache of raw bytes for asset data.\nMaps the handle of the asset to it’s content ID.\nHelper function to return type data for a custom asset …\nThe asset server.\nThe base URL to load assets from.\nMaps asset content IDs, to assets that have been loaded by …\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nThe content ID of the loaded asset.\nContent id of the asset, used to lookup asset from …\nThe function pointer that may be used to clone data with …\nRead the core asset pack.\nThe directory to load the core asset pack.\nThe core asset pack, if it’s been loaded.\nThe metadata asset load context.\nThe loaded data of the asset.\nThe game’s default asset pack.\nThe function pointer that may be used to write a default …\nThe <code>Cid</code>s of the assets this asset depends on.\nThe dependency list of this asset. This should be updated …\nThe content IDs of any assets needed by this asset as a …\nThe function that may be used to deserialize the type.\nGet the number of assets that have had their data …\nThe function pointer that may be used to drop data with …\nList the names of the non-core asset pack folders that are …\nThe function pointer that may be used to compare two …\nGet the number of assets that have errored while loading.\nIf this is a struct, then the field offsets will contain …\nThe fields in the struct, in the order they are defined.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>NetworkHandle</code> from content id (<code>Cid</code>).\nReturn the data for the type.\nThe full name of the type, including any module specifiers.\nGet the game version config, used when making sure asset …\nThe version of the game. This is used to evaluate whether …\nThe game <code>VersionReq</code> this asset pack is compatible with.\nThe required game version to be compatible with this asset …\nThe version of the game that the pack is not compatible …\nBorrow a loaded asset.\nBorrow a <code>LoadedAsset</code> associated to the given handle.\nBorrow a <code>LoadedAsset</code> associated to the given handle.\nGet handle of loaded asset from content id <code>Cid</code>.\nMutably borrow a loaded asset.\nBorrow a loaded asset.\nGet untyped handle of loaded asset from content id <code>Cid</code>.\nBorrow a loaded asset.\nResponds to any asset changes reported by the <code>AssetIo</code> …\nThe function pointer that may be used to hash the value.\nThe runtime ID of the asset.\nThe unique ID of the asset pack.\nThe ID of the asset pack.\nThe asset pack ID.\nThe unique ID of the asset pack.\nIncrement the number of assets that have been downloaded …\nIncrement the number of assets that have errored during …\nIncrement the number of assets that have been loaded by …\nIncrement the number of assets that need to be loaded by …\nLists the packs that have not been loaded due to an …\nThe asset server inner state.\nReturns the schema of the type pointed to by the handle, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate asset <code>Handle</code> by looking up <code>NetworkHandle</code>’s <code>Cid</code> in …\nConvert into <code>UntypedHandle</code>. Panics if <code>AssetServer</code> fails to …\nThe <code>AssetIo</code> implementation used to load assets.\nGet whether or not all the assets are done loading.\nThe kind of schema.\nThe layout of the type.\nGet an event listener that will be notified each time …\nLoad the asset from raw bytes.\nLoad the asset\nLoad another asset as a child of this asset.\nLoad an asset.\nLoad the bytes of the asset at the given path, but return …\nLike <code>load_asset()</code> but forces the asset to reload, even it …\nLoad all assets. This is usually done in an async task.\nLoad the core asset pack.\nGet the binary contents of an asset.\nLoad the asset pack with the given folder name, or else …\nThe asset load progress.\nGet the number of assets that have been downloaded and …\nThe location of the asset.\nThe location that the asset is being loaded from.\nThe pack and path the asset was loaded from.\nHelper function to return type data for a metadata asset.\nThe display name of the asset pack.\nThe name of the schema.\nThe name of the field, if set.\nThe name of the field, if set.\nUser friendly pack name.\nThe short name of the type.\nThe name of the enum variant.\nThe name of the field. Will be <code>None</code> if this is a field of …\nGet a <code>NetworkHandle</code> that can be Serialized and replicated …\nCreate a new <code>FileAssetIo</code>.\nCreate a new <code>WebAssetIo</code> with the given URL as the core …\nInitialize a new <code>DummyIo</code> from an iterator of …\nInitialize a new <code>AssetServer</code>.\nThe ID of the pack, or <code>None</code> if it refers to the core pack.\nThe pack_dir of the pack that the asset is in.\nThe pack_dir of the pack that the asset is in.\nThe unique ID of the asset pack this asset is located in.\nThe directory of the pack that\nMaps the directory names of asset packs to their …\nThe metadata of the pack that could not be loaded.\nThe asset pack this was loaded from, or <code>None</code> if it is from …\nRead the loaded asset packs.\nExtra asset packs. The key is the the name of the asset …\nThe asset packs that have been loaded.\nThe directory to load the asset packs from.\nThe path to the asset in it’s pack.\nThe path to the asset in it’s pack.\nThe path to the asset, relative to the root of the asset …\nMaps the asset <code>AssetLoc</code> to it’s handle.\nThe pointer to load.\nRegister this schema with the global schema registry.\nList of assets that depend on the given assets.\nThe runtime ID of the handle\nGet the core asset pack’s root asset.\nThe root asset for the asset pack.\nThe path to the root asset for the pack.\nThe path to the root asset for the pack.\nGet this type’s <code>Schema</code>.\nThe schema of the asset being loaded.\nThe schema of this variant.\nThe schema of the field.\nSchemas provided in the asset pack.\nThe registered schemas.\nThe paths to schema definitions to be loaded from this …\nThe paths to schema definitions to be loaded from this …\nThe asset server.\nSet the game version config, used when making sure asset …\nSet the <code>AssetIo</code> implementation.\nThe asset store.\nThe layout of the enum tag.\nGet the number of assets that must be loaded.\nClone data to an owned <code>AssetLoc</code>.\nCast a reference of this type to a reference of another …\nCast a mutable reference of this type to a reference of …\nBorrow a loaded asset.\nTry to get handle of loaded asset from content id <code>Cid</code>.\nBorrow a loaded asset.\nTry to get untyped handle of loaded asset from content id …\nBorrow a loaded asset.\nContainer for storing <code>Schema</code> type datas.\nThe Rust <code>TypeId</code> that this <code>Schema</code> was created from, if it …\nCreate a typed <code>Handle&lt;T&gt;</code> from this <code>UntypedHandle</code>.\nConvert the handle to an <code>UntypedHandle</code>.\nGet the core asset pack’s root asset as a type-erased …\nUpdate the CID by combining it’s current data with the …\nThe field’s value.\nThe field’s value.\nInfo for the enum variants.\nThe version number of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nThe version of the asset pack.\nSubscribe to asset changes.\nSubscribe to asset changes.\nSubscribe to asset changes.\nTell the asset backend to watch for changes and trigger …\nFilesystem watcher if enabled.\nThe <code>extension</code> is the portion of the extension that comes …\nThe list of file extensions to load this asset from.\nThe loader implementation for the asset.\nThe alignment of the data.\nThe size of the data.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe align of the opaque type.\nThe schema ref.\nThe size of the opaque type.\nThe schema of the key type.\nThe schema of the value type.\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nThe prelude.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nError creating ID\nDerive macro for deriving <code>Deref</code> on structs with one field.\nDerive macro for deriving <code>DerefMut</code> on structs with one …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nThe ID is in the wrong format.\nA <code>Ulid</code> with a human-readable ascii prefix.\nError creating a <code>LabeledId</code>.\nErrors that can happen while parsing a <code>LabeledId</code>.\nThe prefix was not ASCII.\nThe prefix was too long ( greater than 63 chars ).\nA fast, non-cryptographic, thread-local random number …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …")