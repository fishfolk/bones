searchState.loadedDescShard("bones_ecs", 1, "A fast, non-cryptographic, thread-local random number …\nConvenience trait for constructing a <code>SmallVec</code>\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nA Ulid is a unique 128-bit lexicographically sortable …\nThe ULID could not be parsed.\nExtension trait for <code>Ulid</code>.\nA handle representing a string in the global string cache.\nA standard <code>HashMap</code> using <code>Ustr</code> as the key type with a …\nA standard <code>HashSet</code> using <code>Ustr</code> as the key type with a …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nConstructor that) is the same as <code>Ulid::new()</code>, but that …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nShortens a type name to remove all module paths.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nHints to the compiler that the branch condition is likely …\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nConvenience re-export of common traits, structs and utils.\nReseeds the <code>SeededCore</code> with a new seed/state.\nA fast but <strong>not</strong> cryptographically secure PRNG based on …\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns the number of items the array can hold.\nCreates a <code>SmallVec</code> containing the arguments.\nCreates an inline <code>SmallVec</code> containing the arguments. This …\nConstruct a new <code>SmallVec</code> from a slice.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nHints to the compiler that the branch condition is …\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nCreate a new Ustr from the given &amp;str.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nThe layout that was passed to the allocator\nMemory allocation APIs\nA module for working with borrowed data.\nThe <code>Box&lt;T&gt;</code> type for heap allocation.\nCollection types.\nUtilities related to FFI bindings.\nUtilities for formatting and printing <code>String</code>s.\nCreates a <code>String</code> using interpolation of runtime …\nSingle-threaded reference-counting pointers. ‘Rc’ …\nUtilities for the slice primitive type.\nUtilities for the <code>str</code> primitive type.\nA UTF-8–encoded, growable string.\nThread-safe reference-counting pointers.\nTypes and Traits for working with asynchronous tasks.\nA contiguous growable array type with heap-allocated …\nCreates a <code>Vec</code> containing the arguments.\nThe <code>AllocError</code> error indicates an allocation failure that …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nThe global memory allocator.\nA memory allocator that can be registered as the standard …\nLayout of a block of memory.\nThe parameters given to <code>Layout::from_size_align</code> or some …\nAllocate memory with the global allocator.\nAllocate memory as described by the given <code>layout</code>.\nAllocate zero-initialized memory with the global allocator.\nBehaves like <code>alloc</code>, but also ensures that the contents are …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nDeallocate memory with the global allocator.\nDeallocate the block of memory at the given <code>ptr</code> pointer …\nDeallocates the memory referenced by <code>ptr</code>.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nSignal a memory allocation error.\nReallocate memory with the global allocator.\nShrink or grow a block of memory to the given <code>new_size</code> in …\nAttempts to shrink the memory block.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nA priority queue implemented with a binary heap.\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA doubly-linked list with owned nodes.\nA double-ended queue (deque) implemented with a growable …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nAn ordered set based on a B-Tree.\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\n<code>CString</code> and its related types.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating invalid UTF-8 when converting a <code>CString</code>…\nAn error indicating that an interior nul byte was found.\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nThe <code>format</code> function takes an <code>Arguments</code> struct and returns …\nThe <code>write</code> function takes an output stream, and an <code>Arguments</code>…\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nA single-threaded reference-counting pointer. ‘Rc’ …\nA uniquely owned <code>Rc</code>.\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nImplementation of <code>[T]::concat</code>\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nImplementation of <code>[T]::join</code>\nPerforms bounds-checking of a range.\nPerforms bounds-checking of a range without panicking.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nConverts a boxed slice of bytes to a boxed string slice …\nCreates an <code>&amp;str</code> from a pointer and a length.\nCreates an <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nThe string Pattern API.\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.\nGetter for the underlying string to be searched in\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nConverts the given value to a <code>String</code>.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nAn analogous trait to <code>Wake</code> but used to construct a …\nThe implementation of waking a task on an executor.\nWake this task.\nWake this task.\nWake this task without consuming the waker.\nWake this task without consuming the local waker.\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nThe actual reader/writer we are wrapping.\nReturns a stream over the lines of this byte stream.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>AsyncBufRead</code>.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nA builder for default Fx hashers.\nA <code>HashMap</code> using a default Fx hasher.\nA <code>HashSet</code> using a default Fx hasher.\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nA convenience function for when you need a quick usize …\nA convenience function for when you need a quick 32-bit …\nA convenience function for when you need a quick 64-bit …\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nChecks if this value is equivalent to the given key.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nA Condition Variable\nA closure has completed successfully.\nA mutual exclusive primitive that is always fair, useful …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread is currently executing a closure.\nAn RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA closure has not been executed yet\nA synchronization primitive which can be used to run a …\nCurrent state of a <code>Once</code>.\nA closure was executed but panicked.\nRaw fair mutex type backed by the parking lot.\nRaw mutex type backed by the parking lot.\nRaw reader-writer lock type backed by the parking lot.\nImplementation of the <code>GetThreadId</code> trait for …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nA type indicating whether a timed wait on a condition …\nCreates a new fair mutex in an unlocked state ready for …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nDuration type used for <code>try_lock_for</code>.\nDuration type used for <code>try_lock_for</code>.\nHelper trait which returns a non-zero thread ID.\nMarker type which determines whether a lock guard should …\nMarker type which determines whether a lock guard should …\nMarker type which indicates that the Guard type for a lock …\nMarker type which indicates that the Guard type for a lock …\nInitial value for an unlocked mutex.\nInitial value.\nInitial value for an unlocked <code>RwLock</code>.\nInstant type used for <code>try_lock_until</code>.\nInstant type used for <code>try_lock_until</code>.\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nBasic operations for a mutex.\nAdditional methods for mutexes which support fair …\nAdditional methods for mutexes which support locking with …\nA raw mutex type that wraps another raw mutex to provide …\nBasic operations for a reader-writer lock.\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support fair …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support locking with …\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields an exclusive lock to a waiting thread …\nTemporarily yields a shared lock to a waiting thread if …\nTemporarily yields an upgradable lock to a waiting thread …\nAtomically downgrades an exclusive lock into a shared lock …\nDowngrades an exclusive lock to an upgradable lock.\nDowngrades an upgradable lock to a shared lock.\nChecks whether the mutex is currently locked.\nChecks if this <code>RwLock</code> is currently locked in any way.\nCheck if this <code>RwLock</code> is currently exclusively locked.\nAcquires this mutex, blocking the current thread until it …\nAcquires an exclusive lock, blocking the current thread …\nAcquires a shared lock, blocking the current thread until …\nAcquires a shared lock without deadlocking in case of a …\nAcquires an upgradable lock, blocking the current thread …\nReturns a non-zero thread ID which identifies the current …\nAttempts to acquire this mutex without blocking. Returns …\nAttempts to acquire an exclusive lock without blocking.\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire a shared lock without blocking.\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock without deadlocking in …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire an upgradable lock without blocking.\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nAttempts to upgrade an upgradable lock to an exclusive …\nUnlocks this mutex.\nReleases an exclusive lock.\nReleases an exclusive lock using a fair unlock protocol.\nUnlocks this mutex using a fair unlock protocol.\nReleases a shared lock.\nReleases a shared lock using a fair unlock protocol.\nReleases an upgradable lock.\nReleases an upgradable lock using a fair unlock protocol.\nUpgrades an upgradable lock to an exclusive lock.\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nPartially shuffles a slice by a given amount and returns …\nReseeds the <code>SeededCore</code> with a new seed/state.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nEncapsulates shared borrowing state.\nEncapsulates exclusive borrowing state.\nLock type used by [<code>AtomicCell</code>].\nReturns true if there are too many read refs.\nReturns true if there are too many write refs.\nBorrows can be cloned.\nBorrows can be cloned.\nClones immutable borrow of specified lock. This function …\nClones mutable borrow of specified lock. This function …\nReturns dummy atomic borrow that doesn’t actually locks …\nReturns dummy atomic borrow that doesn’t actually locks …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if specified lock value is borrowed.\nReturns true if specified lock value is borrowed immutably.\nReturns true if specified lock value is borrowed mutably.\nCreate atomic borrow lock. Initially not borrowed.\nReleases immutable borrow of specified lock. This function …\nReleases mutable borrow of specified lock. This function …\nRestore previously leaked <code>AtomicBorrow</code> instance.\nRestore previously leaked <code>AtomicBorrowMut</code> instance.\nAttempts to borrow specified lock immutably.\nAttempts to borrow specified lock mutably.\nAttempts to borrow lock immutably.\nAttempts to borrow lock mutably.\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Ready</code>, returning the wrapped value.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nReturns a reference to the internal buffer.\nReturns a reference to the internal buffer.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nAttempt to shutdown the I/O handle.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nAttempt to downcast the custom boxed error to <code>E</code>.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the inner I/O handle.\nGets a mutable reference to the async I/O handle.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying buffer.\nGets a mutable reference to the underlying reader.\nGets mutable references to the underlying readers.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the inner I/O handle.\nGets a reference to the async I/O handle.\nGets a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying buffer.\nGets a reference to the underlying reader.\nGets references to the underlying readers.\nThe actual reader/writer we are wrapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nExtracts the inner I/O handle.\nExtracts the inner async I/O handle.\nUnwraps the buffered reader, returning the underlying …\nUnwraps the buffered writer, returning the underlying …\nUnwraps the cursor, returning the underlying buffer.\nUnwraps the adapter, returning the underlying reader.\nUnwraps the adapter, returning the underlying readers.\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the number of bytes before this adapter will …\nReturns a stream over the lines of this byte stream.\nCreates a new I/O error from a known kind of error as well …\nWraps an I/O handle implementing <code>std::io</code> traits.\nWraps an I/O handle implementing <code>AsyncRead</code> or <code>AsyncWrite</code> …\nWraps an async I/O handle into a blocking interface.\nCreates a buffered reader with the default buffer capacity.\nCreates a buffered writer with the default buffer capacity.\nCreates a cursor for an in-memory buffer.\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nSeeks to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nPoll this <code>AsyncAsSync</code> for some function.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nPuts a limit on the number of bytes.\nSets the position of this cursor.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates a buffered reader with the specified capacity.\nCreates a buffered writer with the specified buffer …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>AsyncBufRead</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuses the stream so that it stops yielding items after the …\nGet a mutable reference to the underlying stream.\nGet a reference to the underlying stream.\nCalls a closure on each item and passes it on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this stream and get the underlying stream.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nA builder for default Fx hashers.\nA <code>HashMap</code> using a default Fx hasher.\nA <code>HashSet</code> using a default Fx hasher.\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nThis hashing algorithm was extracted from the Rustc …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience function for when you need a quick usize …\nA convenience function for when you need a quick 32-bit …\nA convenience function for when you need a quick 64-bit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nReturns the number of elements the table can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nClears the table, removing all values.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nClears the set, returning all elements in an iterator.\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nReturns an <code>Entry</code> for an entry in the table with the given …\nGets the given key’s corresponding entry by reference in …\nChecks if this value is equivalent to the given key.\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nReturns a reference to an entry in the table with the …\nReturns an <code>OccupiedEntry</code> for an entry in the table with …\nReturns a mutable reference to an entry in the table with …\nExamples\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts an owned copy of the given <code>value</code> into the set if …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element into the <code>HashTable</code> with the given hash …\nInsert a key-value pair into the map without checking if …\nInsert a value the set without checking if the value …\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order, with …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the table.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code>.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code> using the given allocator.\nExperimental and unsafe <code>RawTable</code> API. This module is only …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nReturns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…\nReturns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…\nReturns a mutable reference to the <code>RawTable</code> used …\nReturns a mutable reference to the <code>RawTable</code> used …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the table with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the table as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntryRef’s …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nTake ownership of the key.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntryRef into a mutable reference to …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it. Keeps …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map. …\nReplaces the entry, returning the old key and value. The …\nReplaces the entry, returning the old key and value. The …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nReplaces the key in the hash map with the key used to …\nReplaces the key in the hash map with the key used to …\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nReplaces the entry, returning the old value. The new value …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, replacing any existing value …\nInserts a new element into the table with the hash that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the VacantEntry into a mutable reference to the …\nConverts the AbsentEntry into a mutable reference to the …\nEnsures a value is in the entry by inserting if it was …\nEnsures a value is in the entry by inserting the result of …\nTakes the value out of the entry, and returns it along …\nA reference to a hash table bucket containing a <code>T</code>.\nA reference to an empty bucket into which an can be …\nIterator which consumes elements without freeing the table …\nIterator which consumes a table and returns elements.\nIterator which returns a raw pointer to every full bucket …\nIterator over occupied buckets that could match a given …\nA raw hash table with an unsafe API.\nReturn the information about memory allocated by the table.\nReturns a reference to the underlying allocator.\nReturns a unique mutable reference to the <code>value</code>.\nAcquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.\nReturns a shared immutable reference to the <code>value</code>.\nReturns a pointer to an element in the table.\nReturns the index of a bucket from a <code>Bucket</code>.\nReturns the number of buckets in the table.\nReturns the number of elements the map can hold without …\nRemoves all elements from the table without freeing the …\nMarks all table buckets as empty without dropping their …\nVariant of <code>clone_from</code> to use when a hasher is available.\nCopies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …\nReturns pointer to one past last <code>data</code> element in the table …\nReturns pointer to start of data table.\nReturns an iterator which removes all elements from the …\nReturns an iterator which removes all elements from the …\nErases an element from the table, dropping it in place.\nFinds and erases an element from the table, dropping it in …\nSearches for an element in the table.\nSearches for an element in the table. If the element is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to an element in the table.\nAttempts to get mutable references to <code>N</code> entries in the …\nGets a mutable reference to an element in the table.\nInserts a new element into the table, and returns its raw …\nInserts a new element into the table, and returns a …\nInserts a new element into the table in the given slot, …\nInserts a new element into the table, without growing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator which consumes all elements from the …\nChecks whether the bucket at <code>index</code> is full.\nReturns <code>true</code> if the table contains no elements.\nReturns an iterator over every element in the table. It is …\nReturns an iterator over occupied buckets that could match …\nReturns the number of elements in the table.\nCreates a new empty hash table without allocating any …\nCreates a new empty hash table without allocating any …\nRefresh the iterator so that it reflects an insertion into …\nRefresh the iterator so that it reflects a removal from …\nRemoves an element from the table, returning it.\nFinds and removes an element from the table, returning it.\nTemporary removes a bucket, applying the given function to …\nEnsures that at least <code>additional</code> items can be inserted …\nShrinks the table to fit <code>max(self.len(), min_size)</code> …\nAttempts to insert a new element without growing the table …\nTries to ensure that at least <code>additional</code> items can be …\nAttempts to allocate a new hash table with at least enough …\nAttempts to allocate a new hash table using the given …\nAllocates a new hash table with at least enough capacity …\nAllocates a new hash table using the given allocator, with …\nA Condition Variable\nA closure has completed successfully.\nA mutual exclusive primitive that is always fair, useful …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread is currently executing a closure.\nAn RAII mutex guard returned by <code>FairMutexGuard::map</code>, which …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nA closure has not been executed yet\nA synchronization primitive which can be used to run a …\nCurrent state of a <code>Once</code>.\nA closure was executed but panicked.\nRaw fair mutex type backed by the parking lot.\nRaw mutex type backed by the parking lot.\nRaw reader-writer lock type backed by the parking lot.\nImplementation of the <code>GetThreadId</code> trait for …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nA type indicating whether a timed wait on a condition …\nPerforms an initialization routine once and only once. The …\nPerforms the same function as <code>call_once</code> except ignores …\nCreates a new fair mutex in an unlocked state ready for …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nReturns whether the associated <code>Once</code> has successfully …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new condition variable which is ready to be …\nCreates a new <code>Once</code> value.\nWakes up all blocked threads on this condvar.\nWakes up one blocked thread on this condvar.\nReturns whether the associated <code>Once</code> has been poisoned.\nReturns the current state of this <code>Once</code>.\nReturns whether the wait was known to have timed out.\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nDuration type used for <code>try_lock_for</code>.\nDuration type used for <code>try_lock_for</code>.\nHelper trait which returns a non-zero thread ID.\nMarker type which determines whether a lock guard should …\nMarker type which determines whether a lock guard should …\nMarker type which indicates that the Guard type for a lock …\nMarker type which indicates that the Guard type for a lock …\nInitial value for an unlocked mutex.\nInitial value.\nInitial value for an unlocked mutex.\nInitial value for an unlocked <code>RwLock</code>.\nInstant type used for <code>try_lock_until</code>.\nInstant type used for <code>try_lock_until</code>.\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nBasic operations for a mutex.\nAdditional methods for mutexes which support fair …\nAdditional methods for mutexes which support locking with …\nA raw mutex type that wraps another raw mutex to provide …\nBasic operations for a reader-writer lock.\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support fair …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support recursive …\nAdditional methods for <code>RwLock</code>s which support locking with …\nAdditional methods for <code>RwLock</code>s which support atomically …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nAdditional methods for <code>RwLock</code>s which support upgradable …\nA mutex which can be recursively locked by a single thread.\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the upgradable read access …\nRAII structure used to release the exclusive write access …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the mutex to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nTemporarily yields the <code>RwLock</code> to a waiting thread if there …\nTemporarily yields an exclusive lock to a waiting thread …\nTemporarily yields a shared lock to a waiting thread if …\nTemporarily yields an upgradable lock to a waiting thread …\nCreates a new mutex based on a pre-existing raw mutex.\nCreates a new reentrant mutex based on a pre-existing raw …\nCreates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …\nReturns a raw pointer to the underlying data.\nReturns a raw pointer to the underlying data.\nReturns a raw pointer to the underlying data.\nAtomically downgrades an exclusive lock into a shared lock …\nAtomically downgrades a write lock into a read lock …\nAtomically downgrades an upgradable read lock lock into a …\nDowngrades an exclusive lock to an upgradable lock.\nAtomically downgrades a write lock into an upgradable read …\nDowngrades an upgradable lock to a shared lock.\nForcibly unlocks the mutex.\nForcibly unlocks the mutex.\nForcibly unlocks the mutex using a fair unlock protocol.")