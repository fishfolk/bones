searchState.loadedDescShard("bones_ecs", 2, "Forcibly unlocks the mutex using a fair unlock protocol.\nForcibly unlocks a read lock.\nForcibly unlocks a read lock using a fair unlock protocol.\nForcibly unlocks a write lock.\nForcibly unlocks a write lock using a fair unlock protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mutex based on a pre-existing raw mutex.\nCreates a new reentrant mutex based on a pre-existing raw …\nCreates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nConsumes this mutex, returning the underlying data.\nConsumes this <code>RwLock</code>, returning the underlying data.\nChecks whether the mutex is currently locked.\nChecks whether the mutex is currently locked.\nChecks whether the mutex is currently locked.\nChecks whether the mutex is currently locked.\nChecks if this <code>RwLock</code> is currently locked in any way.\nChecks whether this <code>RwLock</code> is currently locked in any way.\nCheck if this <code>RwLock</code> is currently exclusively locked.\nCheck if this <code>RwLock</code> is currently exclusively locked.\nChecks whether the mutex is currently held by the current …\nChecks whether the mutex is currently held by the current …\nLeaks the mutex guard and returns a mutable reference to …\nAcquires this mutex, blocking the current thread until it …\nAcquires a mutex, blocking the current thread until it is …\nAcquires this mutex, blocking if it’s held by another …\nAcquires a reentrant mutex, blocking the current thread …\nAcquires an exclusive lock, blocking the current thread …\nAcquires a shared lock, blocking the current thread until …\nAcquires a shared lock without deadlocking in case of a …\nAcquires an upgradable lock, blocking the current thread …\nCreates a new <code>MutexGuard</code> without checking if the mutex is …\nCreates a new <code>ReentrantMutexGuard</code> without checking if the …\nCreates a new <code>RwLockReadGuard</code> without checking if the lock …\nCreates a new <code>RwLockUpgradableReadGuard</code> without checking …\nCreates a new <code>RwLockReadGuard</code> without checking if the lock …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>MappedReentrantMutexGuard</code> for a component of …\nMakes a new <code>MappedReentrantMutexGuard</code> for a component of …\nMake a new <code>MappedRwLockReadGuard</code> for a component of the …\nMake a new <code>MappedRwLockWriteGuard</code> for a component of the …\nMake a new <code>MappedRwLockReadGuard</code> for a component of the …\nMake a new <code>MappedRwLockWriteGuard</code> for a component of the …\nReturns a reference to the original <code>Mutex</code> object.\nCreates a new mutex in an unlocked state ready for use.\nCreates a new reentrant mutex in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nReturns a non-zero thread ID which identifies the current …\nReturns the underlying raw mutex object.\nReturns the underlying raw mutex object.\nReturns the underlying raw reader-writer lock object.\nLocks this <code>RwLock</code> with shared read access, blocking the …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nReturns a reference to the original <code>ReentrantMutex</code> object.\nReturns a reference to the original reader-writer lock …\nReturns a reference to the original reader-writer lock …\nReturns a reference to the original reader-writer lock …\nAttempts to acquire this mutex without blocking. Returns …\nAttempts to acquire this lock.\nAttempts to acquire this mutex without blocking. Returns …\nAttempts to acquire this lock.\nAttempts to acquire an exclusive lock without blocking.\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire an exclusive lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire a shared lock without blocking.\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock without deadlocking in …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire a shared lock until a timeout is …\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire this lock until a timeout is reached.\nAttempts to acquire an upgradable lock without blocking.\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to acquire an upgradable lock until a timeout is …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make  a new <code>MappedReentrantMutexGuard</code> for a …\nAttempts to make  a new <code>MappedReentrantMutexGuard</code> for a …\nAttempts to make  a new <code>MappedRwLockReadGuard</code> for a …\nAttempts to make  a new <code>MappedRwLockWriteGuard</code> for a …\nAttempts to make  a new <code>MappedRwLockReadGuard</code> for a …\nAttempts to make  a new <code>MappedRwLockWriteGuard</code> for a …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access …\nAttempts to acquire this <code>RwLock</code> with shared read access …\nAttempts to acquire this <code>RwLock</code> with shared read access …\nAttempts to acquire this <code>RwLock</code> with upgradable read …\nAttempts to acquire this <code>RwLock</code> with upgradable read …\nAttempts to acquire this <code>RwLock</code> with upgradable read …\nAttempts to upgrade an upgradable lock to an exclusive …\nTries to atomically upgrade an upgradable read lock into …\nAttempts to upgrade an upgradable lock to an exclusive …\nTries to atomically upgrade an upgradable read lock into …\nAttempts to upgrade an upgradable lock to an exclusive …\nTries to atomically upgrade an upgradable read lock into …\nFirst, tries to atomically upgrade an upgradable read lock …\nTries to atomically upgrade an upgradable read lock into …\nTries to atomically upgrade an upgradable read lock into …\nAttempts to lock this <code>RwLock</code> with exclusive write access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nUnlocks this mutex.\nUnlocks this mutex. The inner mutex may not be unlocked if …\nReleases an exclusive lock.\nReleases an exclusive lock using a fair unlock protocol.\nUnlocks this mutex using a fair unlock protocol.\nUnlocks this mutex using a fair unlock protocol. The inner …\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the mutex using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nUnlocks the <code>RwLock</code> using a fair unlock protocol.\nReleases a shared lock.\nReleases a shared lock using a fair unlock protocol.\nReleases an upgradable lock.\nReleases an upgradable lock using a fair unlock protocol.\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the mutex to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nTemporarily unlocks the <code>RwLock</code> to execute the given …\nLocks this <code>RwLock</code> with upgradable read access, blocking …\nUpgrades an upgradable lock to an exclusive lock.\nAtomically upgrades an upgradable read lock lock into an …\nFirst, atomically upgrades an upgradable read lock lock …\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nVariant for fast PRNGs, like Wyrand.\nTrait for enabling creating new <code>TurboCore</code> instances from …\nDetermines the kind of PRNG. <code>TurboKind::FAST</code> RNGs are …\nThis trait provides the means to easily generate all …\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nVariant for slower PRNGs, like ChaCha8.\nA marker trait to be applied to anything that implements …\nAssociated type for accepting valid Seed values. Must be …\nTrait for implementing Seedable PRNGs, requiring that the …\nBase trait for implementing a PRNG. Only one method must be\nEnum for determining the kind of PRNG, whether a fast one, …\nExtension trait for automatically implementing all …\nGenerates a random <code>char</code> in ranges a-z and A-Z.\nGenerates a random <code>char</code> in ranges a-z, A-Z and 0-9.\nReturns a random boolean value.\nReturns a boolean value based on a rate. <code>rate</code> represents …\nGenerates a random <code>char</code> in the given range.\nInitialises a default instance of <code>Rng</code>. Warning, the …\nGenerate a random digit in the given <code>radix</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>0.0</code> and <code>1.0</code>.\nReturns a random <code>f32</code> value between <code>-1.0</code> and <code>1.0</code>.\nFills a mutable buffer with random bytes.\nForks a <code>TurboCore</code> instance by deterministically deriving a …\nReturns the argument unchanged.\nReturns an array of constant <code>SIZE</code> containing random <code>u8</code> …\nReturns a random <code>i128</code> value.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a random <code>isize</code> value.\nReturns a random <code>u128</code> value.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nReturns a random <code>usize</code> value.\nReturns a random <code>i128</code> within a given range bound.\nReturns a random <code>i16</code> value.\nReturns a random <code>i32</code> value.\nReturns a random <code>i64</code> value.\nReturns a random <code>i8</code> value.\nReturns a <code>usize</code> value for stable indexing across different …\nCalls <code>U::from(self)</code>.\nReturns a random <code>isize</code> within a given range bound.\nGenerates a random <code>char</code> in the range a-z.\nCreates a new <code>Rng</code> with a randomised seed.\nPartially shuffles a slice by a given amount and returns …\nReseeds the <code>SeededCore</code> with a new seed/state.\nReseeds the current thread-local generator.\nSamples a random item from a slice of values.\nSamples a random item from an iterator of values. <code>O(1)</code> if …\nSamples multiple unique items from a slice of values.\nSamples multiple unique items from an iterator of values.\nSamples multiple unique items from a mutable slice of …\nSamples a random <code>&amp;mut</code> item from a slice of values.\nShuffles a slice randomly in O(n) time.\nReturns a random <code>u128</code> within a given range bound.\nReturns a random <code>u16</code> value.\nReturns a random <code>u32</code> value.\nReturns a random <code>u64</code> value.\nReturns a random <code>u8</code> value.\nGenerates a random <code>char</code> in the range A-Z.\nReturns a random <code>usize</code> within a given range bound.\nStochastic Acceptance implementation of Roulette Wheel …\nStochastic Acceptance implementation of Roulette Wheel …\nCreates a new <code>SeededCore</code> with a specific seed value.\nA Random Number generator, powered by the <code>WyRand</code> algorithm.\nA handle to a resource from a <code>Resources</code> collection.\nAn untyped, atomic resource cell.\nError thrown when a resource cell cannot be inserted …\nA collection of resources.\nAn untyped resource that may be inserted into …\nStorage for un-typed resources.\nBorrow the resource.\nLock the resource for reading.\nMutably borrow the resource.\nLock the resource for read-writing.\nClone the inner data, creating a new copy instead of …\nCheck whether or not the resource with the given ID is …\nCheck whether or not a resource is in the store.\nCheck whether or not a cell for the given resource has …\nInitialize a new, empty <code>UntypedResource</code>.\nCreate a new, empty resource cell.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>UntypedResource</code> for the given schema, …\nCreate from an <code>UntypedResource</code>.\nBorrow the resource for the given schema.\nBorrow a resource.\nGet a cell for the resource with the given schema.\nGets a clone of the resource cell for the resource of the …\nBorrow a resource.\nInitialize the resource using it’s <code>FromWorld</code> …\nBorrow the resource, initializing it if it doesn’t exist.\nBorrow the resource, initializing it if it doesn’t exist.\nInsert resource data into the cell, returning the previous …\nInsert a resource.\nThis is an advanced use-case function that allows you to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>Resources</code> and extract the underlying …\nConvert into an untyped resource.\nCreates a new <code>UntypedResource</code> storing the given data.\nCreate an empty <code>UntypedResources</code>.\nCreate an empty <code>Resources</code>.\nCreate a new resource cell with the given data.\nRemove the resource data, returning what was stored in it.\nRemove a resource from the store, if it is present.\nRemove the resource from the cell, leaving the cell empty.\nGet the schema of the resource.\nBorrow the underlying <code>UntypedResources</code> store.\nA resource containing the <code>Commands</code> command queue.\nA <code>SystemParam</code> that can be used to schedule systems that …\nA <code>StageLabel</code> for the 5 core stages.\nResource that is automatically added to the world while a …\nThe first stage\nThe fifth stage\nThe fourth stage\nThe second stage\nA collection of systems that will be run in order.\nTrait for things that may be used to identify a system …\nTrait for system stages. A stage is a\nAn ordered collection of <code>SystemStage</code>s.\nThe third stage\nAdd a system to be run at the end of the stage.\nAdd a system that will run each frame until it succeeds …\nAdd a system that will run only once, before all of the …\nAdd a system to this stage.\nAdd a <code>System</code> to the stage with the given label.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not the startup systems have been run yet.\nThe unique identifier for the stage.\nReturns a unique identifier for the stage.\nThe unique identifier for the stage.\nInsert a new stage, after another existing stage\nInsert a new stage, before another existing stage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe human-readable name for the stage, used for error …\nReturns the human-readable name of the label, used in …\nThe human-readable name for the stage, used for error …\nCreate a new, empty stage, for the given label.\nThe system queue that will be run at the end of the stage\nRemove all systems from this stage.\nRemove all systems from all stages, including startup and …\nRemove all systems from all stages, including startup and …\nExecute the systems on the given <code>world</code>.\nExecute the systems on the given <code>world</code>.\nSystems that are continously run until they succeed(return …\nThe stages in the collection, in the order that they will …\nThe systems that should run at startup.\nThe list of systems in the stage.\nCreate a <code>SystemStages</code> collection, initialized with a stage …\n<code>SystemParam</code> for getting read access to a <code>ComponentStore</code>.\n<code>SystemParam</code> for getting mutable access to a <code>ComponentStore</code>.\nThe system input parameter.\nConverts a function into a <code>System</code>.\nThe type of the parameter, ranging over the lifetime of …\n<code>SystemParam</code> for getting read access to a resource.\n<code>SystemParam</code> for getting read access to a resource and …\n<code>SystemParam</code> for getting mutable access to a resource.\n<code>SystemParam</code> for getting mutable access to a resource and …\nThe intermediate state for the parameter, that may be …\nStruct containing a static system.\nThe type of the system that is output\nTrait implemented by systems.\nTrait used to implement parameters for <code>System</code> functions.\nThis is used create an instance of the system parame, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is called to produce the intermediate state of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a best-effort name for the system, used in diagnostics.\nA best-effort name for the system, for diagnostic purposes.\nRun the system.\nThis is run every time the system is executed\nConvert into a <code>System</code>.")