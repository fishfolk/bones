name: 🔁 Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

jobs:
  check_formatting:
    runs-on: ubuntu-latest
    name: 🗒 Check Rust formatting
    steps:
      - name: ⬇️ Checkout Source
        uses: actions/checkout@v3

      - name: 🦀 Install Rustfmt
        run: rustup component add rustfmt

      - name: 🔧 Check
        run: cargo fmt --all -- --check

  clippy_correctness_checks:
    runs-on: ubuntu-latest
    name: 🔧 Clippy correctness checks
    strategy:
      fail-fast: false
      matrix:
        config:
          - { target: "x86_64-unknown-linux-gnu", target_dir: "target" }
          - { target: "wasm32-unknown-unknown", target_dir: "web-target" }
    steps:
      - name: ⬇️ Checkout Source
        uses: actions/checkout@v3

      - name: 🧰 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev

      - name: 🧰 Install WASM Target
        if: matrix.config.target == 'wasm32-unknown-unknown'
        run: |
          rustup target add ${{ matrix.config.target }}
          rustup component add clippy

      - name: 🧰 Install Clippy
        if: matrix.config.target != 'wasm32-unknown-unknown'
        run: rustup component add clippy

      - name: ♻️ Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            web-target/
          key: ci-${{ matrix.config.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ci-${{ matrix.config.target }}-

      - name: 🔧 Check
        env:
          CARGO_TARGET_DIR: ${{ matrix.config.target_dir }}
        run: cargo clippy --target ${{ matrix.config.target }} -- -W clippy::correctness -D warnings

      - name: ⚙️ Test
        if: matrix.config.target != 'wasm32-unknown-unknown'
        env:
          CARGO_TARGET_DIR: ${{ matrix.config.target_dir }}
        run: cargo test --workspace

  minimal_deps_check:
    runs-on: ubuntu-latest
    name: 🔧 Check Minimal Dependency Versions
    steps:
      - name: ⬇️ Checkout Source
        uses: actions/checkout@v3

      - name: 🧰 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev

      - name: 🧰 Install Rust Nightly
        run: rustup toolchain install nightly

      - name: ♻️ Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: check-minimal-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            check-minimal-deps-

      - name: 🔧 Check
        run: cargo +nightly check -Z direct-minimal-versions --workspace

  cargo-deny:
    name: ©️ License and advisories check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}

  miri_tests:
    runs-on: ubuntu-latest
    name: 📡 Miri tests
    steps:
      - uses: actions/checkout@v3
      - name: 🧰 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev
      - name: 🧰 Install Miri
        run: |
          rustup toolchain install nightly --component miri
          rustup override set nightly
          cargo miri setup
      - name: ♻️ Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            web-target/
          key: ci-miri-${{ matrix.config.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ci-miri-${{ matrix.config.target }}-
      - name: 📡 Test with Miri
        run: |
          # Try multiple seeds to catch possible alignment issues
          for SEED in $(seq 0 10); do
            echo "Trying seed: $SEED"
            MIRIFLAGS=-Zmiri-seed=$SEED cargo miri test || { echo "Failing seed: $SEED"; exit 1; };
          done
